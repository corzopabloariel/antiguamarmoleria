/**
 * @param e - entidad perteneciente al array de entidades definido en declaration.js
 * @param dataPYRUS - permite completar datos TP_ENUM. { K : V }
 * @param src - dirección de imagen por defecto
 * @param modify - modifica el tipo de elemento de una entidad. { K : V } - Ver archivo declaration.js para los formatos
 * -----------------------------------------/
 * Herramienta para armado de formularios
 * Cada Formulario es único, las entidades anteponen su nombre a cada FORM
 * Función que construye los names e id de los elementos del FORM
 * Las entidades con EDITOR RICO pueden configurarse en el archivo DECLARATION con valores sacados de https://ckeditor.com/latest/samples/toolbarconfigurator/index.html#advanced
 *
 * Log más específicos
 * FOLDER para elementos TIPO ARCHIVOS
 * LINK en elementos TP_EMAIL
 * Formato moneda en elementos TP_MONEY
 * Se puede eliminar un elemento característica de la entidad
 * Doble imagen en fondo claro y oscuro, para elementos transparentes donde podían perderse con el fondo único
 * Se modificó la lista de colores de campos EDITOR
 * Identificación de los TP_FECHA y conversión a formato dd/mm/yyyy ...
 * Las imágenes tienen un campo oculto con su ubicación
 * Elemento único para links de Youtube
 * Más elementos tipo fecha
 * -----------------------------------------/
 * @date 02.2020
 * @last_change 20.02.2020
 * @version 0.2.6.0
 */
Pyrus = function (e = null, dataPYRUS = null, modify = null) {
	this.entidad = e;
    this.objeto = null;
    this.name = null;
    this.especificacion = null;
    this.objetoSimple = null;

    this.constructor = () => {
        console.time( "Time this" );
		if( this.entidad === null || this.entidad === "" ) {
			console.warn( "AVISO: No se ha pasado ninguna entidad. Uso limitado" );
			return false;
		}
        /* ------------------- */
        if( ENTIDADES[ this.entidad ] === undefined ) {
            console.warn( `AVISO: Entidad "${this.entidad}" no encontrada` );
			return false;
        }
        this.objeto = ENTIDADES[ this.entidad ];
        this.especificacion = this.objeto.ATRIBUTOS;
        this.name = this.objeto.TABLE === undefined ? e : this.objeto.TABLE;
        /* ------------------- */
        this.getEspecificacion();
        console.timeEnd( "Time this" );
    };
    /**
     * @deprecated
     */
    this.objetoLimpio = () => {
		let r = {};
		for( var i in this.especificacion ) {
			r[ i ] = null;
		}
		return r;
    };
    /**
     * @description Construye conjuntos de elementos de la cabecera de la tabla
     * @returns @type Array
     */
    this.columnas = () => {
        let Arr = [];
        for( let x in this.especificacion ) {
            if( this.especificacion[ x ].VISIBILIDAD != "TP_VISIBLE" && this.especificacion[ x ].VISIBILIDAD != "TP_VISIBLE_TABLE" )
                continue;
            width_ = "auto";
            class_ = "";
            name_ = x.toUpperCase();
            if( this.especificacion[ x ].NOMBRE !== undefined )
                name_ = this.especificacion[ x ].NOMBRE.toUpperCase();
            if( this.especificacion[ x ].WIDTH !== undefined && this.especificacion[ x ].TABLE === undefined )
                width_ = this.especificacion[ x ].WIDTH;
            else {
                if( this.especificacion[ x ].TABLE !== undefined )
                    width_ = this.especificacion[ x ].TABLE;
            }
            if( this.especificacion[ x ].CLASS !== undefined )
                class_ = this.especificacion[ x ].CLASS
            Arr.push( { NAME: name_ , COLUMN: x , WIDTH: width_ , CLASS: class_ } );
        }
        return Arr;
    };
    /**
     * @description Crea cabecera de tabla
     * @param columns @type array c/parámetros de la cabecera de la tabla
     * @param replace @type boolean reemplaza cabecera completa o adiciona
     * @returns string
     */
    this.table = ( columns = null , replace = false ) => {
        let columnsDATA = this.columnas();
        let tableHTML = "";

        tableHTML += `<thead class="thead-dark">`;
        if( replace ) {
            if( columns !== null ) {
                columns.forEach( function( e ) {
                    tableHTML += `<th style="width:${e.WIDTH}">${e.NAME}</th>`;
                });
            }
        } else {
                columnsDATA.forEach( function( e ) {
                    let flag = 1;
                    if (this.objeto.IDIOMAS) {
                        if (this.objeto.IDIOMAS[e.COLUMN]) {
                            for (let idioma in this.objeto.IDIOMAS[e.COLUMN].ELEMENT)
                                tableHTML += `<th style="width:${e.WIDTH}">${e.NAME}<br/>${this.objeto.IDIOMAS[e.COLUMN].ELEMENT[idioma]}</th>`;
                            flag = 0;
                        }
                    }
                    if (flag) {
                        if( modify === null)
                            tableHTML += `<th style="width:${e.WIDTH}">${e.NAME}</th>`;
                        else {
                            if( modify[ e.COLUMN ] === undefined)
                                tableHTML += `<th style="width:${e.WIDTH}">${e.NAME}</th>`;
                            else if( modify[ e.COLUMN ].REMOVE === undefined ) {
                                if( modify[ e.COLUMN ].VISIBILIDAD != "TP_INVISIBLE" )
                                    tableHTML += `<th style="width:${e.WIDTH}">${e.NAME}</th>`;
                            }
                        }
                    }
                }, this);
            if(columns !== null) {
                columns.forEach( function( e ) {
                    tableHTML += `<th style="width:${e.WIDTH}">${e.NAME}</th>`;
                });
            }
        }
        tableHTML += `</thead>`;

        return `<div class="table-responsive"><table id="tabla" class="table table-striped table-hover table-borderless mb-0">${tableHTML}<tbody></tbody></table></div>`;
    };

    this.getEspecificacion = () => {
        this.objetoSimple = {};
        this.objetoSimple[ "name" ] = this.name;
        this.objetoSimple[ "especificacion" ] = {};
        this.objetoSimple[ "detalles" ] = {};
        this.objetoSimple["rules"] = {};
        for( let x in this.especificacion ) {
            if(this.especificacion[ x ].RULE)
                this.objetoSimple["rules"][x] = this.especificacion[ x ].RULE;
            if( this.especificacion[ x ].HIDDEN !== undefined )
                continue;
            this.objetoSimple[ "especificacion" ][ x ] = this.especificacion[ x ].TIPO;
            switch( this.especificacion[ x ].TIPO ) {
                case "TP_FILE":
                case "TP_IMAGE":
                case "TP_BLOB":
                    this.objetoSimple[ "detalles" ][ x ] = {
                        FOLDER: this.especificacion[ x ].FOLDER === undefined ? this.name : this.especificacion[ x ].FOLDER
                    };
                    break;
                case "TP_CAST":
                    this.objetoSimple[ "detalles" ][ x ] = {
                        CAST: this.especificacion[ x ].CAST === undefined ? null : this.especificacion[ x ].CAST
                    };
                    break;
                case "TP_PASSWORD":
                    this.objetoSimple[ "detalles" ][ x ] = {
                        PASSWORD: 1
                    };
                    break;
            }
        }
        if( this.objeto.IDIOMAS !== undefined ) {
            this.objetoSimple[ "idiomas" ] = {};
            for( let x in this.objeto.IDIOMAS )
                this.objetoSimple[ "idiomas" ][ x ] = Object.keys( this.objeto.IDIOMAS[ x ].ELEMENT );
        }
    };
    this.clean = ( CKEDITOR_ , name = null ) => {
        if (window.ARR_names) {
            window.ARR_names.forEach(e => {
                let flag = 1;
                if( CKEDITOR_ !== null ) {
                    if( CKEDITOR_.instances[ `${e.idElementForm}` ] !== undefined ) {
                        CKEDITOR_.instances[ `${e.idElementForm}` ].setData( '' );
                        flag = 0;
                    }
                }
                if (flag) {
                    if (this.especificacion[e.element.element]) {
                        switch (this.especificacion[e.element.element].TIPO) {
                            case "TP_IMAGE":
                            case "TP_BLOB":
                                $( `#src-${e.idElementForm}` ).attr( "src" , "" );
                                $( `#src-${e.idElementForm}-2` ).attr( "src" , "" );
                            break;
                            case "TP_FILE":
                                $( `#${e.idElementForm}` ).attr( "src" , "" );
                                $( `#${e.idElementForm}_button` ).prop( "disabled" , true )
                            break;
                            case "TP_CHECK":
                                if( $(`#${e.idElementForm}` ).is( ":checked" ) )
                                    $(`#${e.idElementForm}` ).prop( "checked" , false ).trigger( "change" );
                            break;
                            case "TP_ENUM":
                            case "TP_COLOR":
                                $( `#${e.idElementForm}` ).val("").trigger( "change" );
                            break;
                            default:
                                if( $( `#${e.idElementForm}` ).length )
                                    $( `#${e.idElementForm}` ).val("");
                        }
                    }
                }
            });
        }
    };
    this.delete = ( t , alertify_ , url , id ) => {
        $( t ).prop( "disabled" , true );

        $( '[data-toggle="tooltip"]' ).tooltip( 'hide' );
        Swal.fire({
            title: alertify_.title,
            text: alertify_.body,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirmar'
        }).then( ( result ) => {
            if ( result.value ) {

                axios.delete( url, { params : { id : id } } )
                .then(function(res) {
                    if(parseInt(res.data) == 1) {
                        Swal.fire(
                            'Contenido eliminado!',
                            'Registro dado de baja.',
                            'success'
                        )
                        location.reload();
                    } else {
                        Swal.fire(
                            'Atención',
                            'Ocurrió un error al eliminar. Reintente',
                            'error'
                        )
                    }
                }).catch(function(err) {
                    $( t ).prop( "disabled" , false );
                    Swal.fire(
                        'Atención',
                        'Ocurrió un error interno.',
                        'error'
                    )
                }).then(function() {
                    $( t ).prop( "disabled" , false );
                });
            }
        });
    };
    /**
     * @type object CKEDITOR
     */
    this.editor = ( CKEDITOR_ , id = "", multiple = null ) => {
        if( this.objeto.EDITOR === undefined ) {
            console.error( "#### SIN CARACTERÍSTICAS DE EDITOR" );
            return null;
        }
        for( let x in this.objeto.EDITOR ) {
            if( this.objeto.IDIOMAS !== undefined ) {
                if( this.objeto.IDIOMAS[ x ] !== undefined ) {
                    for( let y in this.objeto.IDIOMAS[ x ].ELEMENT ) {
                        names = {
                            element : x,
                            id : id,
                            multiple : multiple,
                            idioma : y
                        };
                        Arr = this.constructorNames( names );
                        CKEDITOR_.replace( `${Arr.idElementForm}` , this.objeto.EDITOR[ x ] );
                    }
                    continue;
                }
            }
            names = {
                element : x,
                id : id,
                multiple : multiple
            };
            Arr = this.constructorNames( names );
            e = this.objeto.EDITOR[ x ];
            e[ "on" ] = {
                change: function( evt ) {
                    changeCkeditor( x , evt );
                }
            }
            CKEDITOR_.replace( `${Arr.idElementForm}` , e );
        }
    };
    this.card = ( url , data , buttonsOK = [ "c" , "e" , "d" ] ) => {
        let html = "";
        let dataAUX = data;
        if( data === null ) {
            console.error( "#### SIN ELEMENTOS - En la base ####" );
            return null;
        }
        if( data.current_page !== undefined ) {
            data = data.data;
            dataAUX = data;
            console.warn( "### PAGINADO ACTIVO ####" );
        }
        console.info( "### CONSTRUYENDO CARDS ####" );

        if( !Array.isArray(data) )
            dataAUX = Object.keys( data );

        formatter = new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS',
        });
        dataAUX.forEach( ( x ) => {
            row = [];
            id = null;
            if( !Array.isArray(data) ) {
                id = x;
                x = data[ x ];
            } else {
                if( x.id !== undefined )
                    id = x.id;
            }
            this.columnas().forEach( ( column ) => {
                element = x[ column.COLUMN ] === null ? "" : x[ column.COLUMN ];
                image = null;
                cardBody = "";
                if( element === undefined ) element = id;
                if( this.especificacion[ column.COLUMN ].TIPO == "TP_BLOB" ) {
                    img = `data:${x.mime};base64,${element}`;
                    image = `<img class="card-img-top p-3" src="${img}" onerror="this.src='${src}'"/>`;
                }
                if( this.especificacion[ column.COLUMN ].TIPO == "TP_IMAGE" ) {
                    date = new Date();
                    info = element.d;
                    if( typeof element == "object" )
                        element = element.i;
                    imgURL = element == "" ? element : `${url}/${element}`;
                    img = element == "" ? element : `${url}/${element}?t=${date.getTime()}`;
                    image = `<img class="card-img-top p-3 mx-auto d-block" style="max-width: 100%; width: auto;" src="${img}" onerror="this.src='${src}'"/>`;
                    if( info !== undefined ) {
                        cardBody += `<p class="text-center mx-auto mt-2"><strong class="mr-1">Dimensiones:</strong>${info[ 0 ]}px x ${info[ 1 ]}px</p>`;
                        cardBody += `<p class="text-center mx-auto mt-1"><strong class="mr-1">Tipo:</strong>${info.mime}</p>`;
                        cardBody += `<p class="text-center mx-auto mt-1"><strong class="mr-1 text-truncate">URL:</strong>${imgURL}</p>`;
                        cardBody += `<p class="text-center mx-auto mt-1 d-flex justify-content-center flex-wrap align-items-center">`;
                            cardBody += `<a href="${imgURL}" target="blank"><i class="fas fa-external-link-alt"></i></a>`;
                            cardBody += `<a onclick="copy( this , '${imgURL}' )" href="#" class="ml-1"><i style="cursor:pointer;" class="far fa-copy"></i></a>`;
                            cardBody += `<a href="${imgURL}" download class="ml-1"><i class="fas fa-download"></i></a>`;
                        cardBody += `</p>`;
                    }
                }
                html += `<div class="card">`;
                    html += `${image}`;
                    html += `<div class="card-body">${cardBody}</div>`;
                    html += `<div class="card-footer">`;
                        html += `<div class="d-flex justify-content-center">`;
                        if( buttonsOK.indexOf( "c" ) >= 0 )
                            html += `<button data-toggle="tooltip" data-placement="left" title="Copiar elemento" style="font-size: 12px;" onclick="clone(this,'${id}')" class="btn text-center btn-info rounded-0" disabled><i class="far fa-clone"></i></button>`;
                        if( buttonsOK.indexOf( "e" ) >= 0 )
                            html += `<button data-toggle="tooltip" data-placement="left" title="Editar elemento" style="font-size: 12px;" onclick="edit(this,'${id}')" class="btn text-center rounded-0 btn-warning"><i class="fas fa-pencil-alt"></i></button>`;
                        if( buttonsOK.indexOf( "d" ) >= 0 )
                            html += `<button style="font-size: 12px;" data-toggle="tooltip" data-placement="left" title="Eliminar elemento" onclick="erase(this,'${id}')" class="btn text-center rounded-0 btn-danger"><i class="fas fa-trash-alt"></i></button>`;
                        html += `</div>`;
                    html += `</div>`;
                html += `</div>`;
            });
        });
        return html;
    };
    this.convert = (value, url, type, specification, elements, column) => {
        let td = document.createElement("td");
        if (value === null) {
            td.textContent = `SIN "${specification.NOMBRE}"`;
            return td;
        }
        switch(type) {
            case "TP_IMAGE":
                date = new Date();
                info = value.d;
                if( value.e == "mp4" ) {
                    value = value.i;
                    videoURL = value == "" ? value : `${url}/${value}`;
                    w = specification.WIDTH === undefined ? "auto" : ( specification.TABLE !== undefined ? specification.TABLE : specification.WIDTH );
                    value = `<video style="width: ${w};" class="d-block mx-auto" controls>`;
                        value += `<source src="${videoURL}" type="video/mp4">`;
                        value += `Your browser does not support the video tag.`;
                    value += `</video>`;
                    value += `<p class="text-center mx-auto mt-1"><strong class="mr-1">Tipo:</strong>video MP4</p>`;
                    value += `<p class="text-center mx-auto mt-1"><strong class="mr-1 text-truncate">URL:</strong>${videoURL}</p>`;
                    value += `<p class="text-center mx-auto mt-1 d-flex justify-content-center flex-wrap align-items-center">`;
                        value += `<a href="${videoURL}" target="blank"><i class="fas fa-external-link-alt"></i></a>`;
                    value += `</p>`;
                } else {
                    value = value.i;
                    imgURL = value == "" ? value : `${url}/${value}`;
                    img = value == "" ? value : `${url}/${value}?t=${date.getTime()}`;
                    w = specification.WIDTH === undefined ? "auto" : ( specification.TABLE !== undefined ? specification.TABLE : specification.WIDTH );
                    value = `<img style="width: ${w};" class="d-block mx-auto" src="${img}" onerror="this.src='${src}'"/>`;
                    if( info !== undefined ) {
                        value += `<p class="text-center mx-auto mt-2"><strong class="mr-1">Dimensiones:</strong>${info[ 0 ]}px x ${info[ 1 ]}px</p>`;
                        value += `<p class="text-center mx-auto mt-1"><strong class="mr-1">Tipo:</strong>${info.mime}</p>`;
                        value += `<p class="text-center mx-auto mt-1"><strong class="mr-1 text-truncate">URL:</strong>${imgURL}</p>`;
                        value += `<p class="text-center mx-auto mt-1 d-flex justify-content-center flex-wrap align-items-center">`;
                            value += `<a href="${imgURL}" target="blank"><i class="fas fa-external-link-alt"></i></a>`;
                            value += `<a onclick="copy( this , '${imgURL}' )" href="#" class="ml-1"><i style="cursor:pointer;" class="far fa-copy"></i></a>`;
                            value += `<a href="${imgURL}" download class="ml-1"><i class="fas fa-download"></i></a>`;
                        value += `</p>`;
                    }
                }
                td.innerHTML = value;
            break;
            case "TP_ARRAY":
                value = elements[ specification.COLUMN ];
                if( value !== null && value !== undefined )
                    value = value.length;
                else
                    value = 0;
                td.textContent = value;
                td.classList.add("text-center");
            break;
            case "TP_CHECK":
                if (specification.OPTION !== undefined) {
                    if (specification.OPTION[ value ] !== undefined) {
                        value = specification.OPTION[ value ];
                        td.textContent = value;
                    }
                }
            break;
            case "TP_YOUTUBE":
                y = `https://www.youtube.com/watch?v=${value}`;
                value = `<iframe class="w-100 h-100" src="https://www.youtube.com/embed/${value}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                value = `<p class="text-center"><a class="text-primary mb-2" href="${y}" target="blank">${y}</a><i class="fas fa-external-link-alt ml-2"></i></p>${value}`;
                td.innerHTML = value;
            break;
            case "TP_FILE":
                value = `<a href="${url}/${value.i}" target="_blank" class="text-primary">${value.i}</a><i class="fas fa-external-link-alt ml-2"></i>`;
                td.innerHTML = value;
            break;
            case "TP_COLOR":
                value = `<p>${value}</p><div class="mt-2" style="height: 10px; background-color: ${value}"></div>`;
                td.innerHTML = value;
            break;
            case "TP_LINK":
                value = `<a href="${value}" target="_blank" class="text-primary">${value}</a><i class="fas fa-external-link-alt ml-2"></i>`;
                td.innerHTML = value;
            break;
            case "TP_EMAIL":
                value = `<a href="mailto:${value}" target="_blank" class="text-primary">${value}</a><i class="fas fa-external-link-alt ml-2"></i>`;
                td.innerHTML = value;
            break;
            case "TP_FECHA":
            case "TP_DATE":
                value = dates.string( dates.convert( value ) , specification.FORMAT === undefined ? [ "dd" , "mm" , "aaaa" , "h" , "m" , "s" ] : specification.FORMAT );
                td.textContent = value;
                td.classList.add("text-right");
            break;
            case "TP_MONEY":
                value = formatter.format(value);
                td.textContent = value;
                td.classList.add("text-right");
            break;
            case "TP_ENUM":
                if( specification.ENUM !== undefined ) {
                    if (typeof value != "object")
                        value = specification.ENUM[ value ];
                    else {
                        aux_enum = value.map(x => {
                            return `<p>${specification.ENUM[x]}</p>`;
                        });
                        value = aux_enum.join("");
                    }
                } else {
                    if( dataPYRUS !== null ) {
                        if( dataPYRUS[  column.COLUMN ] !== undefined ) {
                            if( dataPYRUS[  column.COLUMN ].DATA[ value ] !== undefined ) {
                                if( !isNaN( value ) )
                                    value = parseInt( value );
                                value = dataPYRUS[  column.COLUMN ].DATA[ value ];
                                if( typeof value == "object" ) {
                                    if( ENTIDADES[ specification.RELACION.E ].IDIOMAS !== undefined ) {
                                        if( ENTIDADES[ specification.RELACION.E ].IDIOMAS[ specification.RELACION.A ] !== undefined ) {
                                            table = '<div class="mt-n2">';
                                            for( let t in ENTIDADES[ specification.RELACION.E ].IDIOMAS[ specification.RELACION.A ].value ) {
                                                table += '<div class="row mt-2">';
                                                    table += `<div class="col-12 col-md text-uppercase">${ENTIDADES[ specification.RELACION.E ].IDIOMAS[ specification.RELACION.A ].value[ t ]}</div>`;
                                                    table += `<div class="col-12 col-md">${value[ t ]}</div>`
                                                table += '</div>';
                                            }
                                            table += '</div>';
                                            value = table;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                td.innerHTML = value;
            break;
            default:
                td.innerHTML = `<span class="edit" data-name="${this.name}" data-column="${column.COLUMN}" data-id="${id}">${value}</span>`;
        }
        return td;
    };
    this.row = (elements, url, tbody, id, buttonsOK, button) => {
        const columns = this.columnas();
        let tr = document.createElement("tr");
        tr.dataset.id = id;
        let cols = columns.map(y => {
            return this.convert(elements[y.COLUMN], url, this.especificacion[y.COLUMN].TIPO, this.especificacion[y.COLUMN], elements, y);
        });
        cols.forEach(c => tr.appendChild(c));
        if (buttonsOK.length != 0 || button !== null) {
            let td = document.createElement("td");
            td.classList.add("text-center");
            td.style.width = "50px";
            td.style.maxWidth = "150px";
            buttons = `<td class="text-center" style="width:200px; max-with: 200px">`;
                buttons += `<div class="d-flex justify-content-center">`;
                if( buttonsOK.indexOf( "c" ) >= 0 )
                    buttons += `<button data-toggle="tooltip" data-placement="left" title="Copiar elemento" style="font-size: 12px;" onclick="clone(this,'${id}')" class="btn text-center btn-info rounded-0" disabled><i class="far fa-clone"></i></button>`;
                if( buttonsOK.indexOf( "e" ) >= 0 )
                    buttons += `<button data-toggle="tooltip" data-placement="left" title="Editar elemento" style="font-size: 12px;" onclick="edit(this,'${id}')" class="btn text-center rounded-0 btn-warning"><i class="fas fa-pencil-alt"></i></button>`;
                if( buttonsOK.indexOf( "d" ) >= 0 )
                    buttons += `<button style="font-size: 12px;" data-toggle="tooltip" data-placement="left" title="Eliminar elemento" onclick="erase(this,'${id}')" class="btn text-center rounded-0 btn-danger"><i class="fas fa-trash-alt"></i></button>`;
                if( buttonsOK.indexOf( "s" ) >= 0 )
                    buttons += `<button style="font-size: 12px;" data-toggle="tooltip" data-placement="left" title="Ver elemento" onclick="see(this,'${id}')" class="btn text-center rounded-0 btn-primary"><i class="fas fa-eye"></i></button>`;
                if( button !== null ) {
                    button.forEach( function( b ) {
                        buttons += `<button data-toggle="tooltip" data-placement="left" title="${b.title}" style="font-size: 12px;" onclick="${b.function}Function(this,'${id}')" class="btn text-center rounded-0 ${b.class}">${b.icon}</button>`;
                    });
                }
                buttons += `</div>`;
            buttons += `</td>`;
            td.innerHTML = buttons;
            tr.appendChild(td);
        }
        tbody.appendChild(tr);
    };
    /**
     * @type object target
     * @type string url - url base
     * @type object / array data
     * @var button @type object @description elemento tipo objeto que contiene las características de un boton. Función que dispara, color e ícono
     */
    this.elements = (target , url , data , buttonsOK = [ "c" , "e" , "d" ] , button = null ) => {
        let table = document.querySelector(target);
        let dataAUX = data;
        console.log(target)
        if( data === null ) {
            console.error( "#### SIN ELEMENTOS - En la base ####" );
            return null;
        }
        if( window.usr_data !== undefined ) {
            if( parseInt( window.usr_data.is_admin ) > 1 ) {
                i = buttonsOK.indexOf( "d" );
                buttonsOK.splice( i , 1 );
            }
        }
        if( data.current_page !== undefined ) {
            data = data.data;
            dataAUX = data;
            console.warn( "### PAGINADO ACTIVO ####" );
        }
        console.info( "### CONSTRUYENDO TABLA ####" );

        if( !Array.isArray(data) )
            dataAUX = Object.keys( data );
        let tbody = null;
        if(table.querySelector("tbody"))
            tbody = table.querySelector("tbody");
        else
            tbody = document.createElement("tbody");

        formatter = new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS',
        });
        dataAUX.map( x => {
            id = null;
            if( !Array.isArray(data) ) {
                id = x;
                x = data[ x ];
            } else {
                if( x.id !== undefined )
                    id = x.id;
            }
            return this.row(x, url, tbody, id, buttonsOK, button);
        }, this);
    };
    this.one = ( url , callbackOK , callbackFail = null ) => {
        axios.get( url, {
            responseType: 'json'
        })
        .then(function( res ) {
            callbackOK.call( this , res );
        })
        .catch(function(err) {
            if( callbackFail !== null )
                callbackFail.call( this , err );
        })
        .then(function() {});
    };
    this.show = ( CKEDITOR_ , url , data , identifierNAME = null , identifier = null, contenido = 0 ) => {
        if( data === null ) {
            console.warn( `### SIN DATOS ###` );
            return null;
        }
        console.group();
        console.info( `### COMPLETANDO FORMULARIO ###` );
        console.table( [ { Entidad : this.entidad } ] );
        console.groupEnd();
        let ARR_names = [];
        if(!window.ARR_names)
            window.ARR_names = [];
        for (let x in this.especificacion) {
            if (!data[x])
                continue;
            if (this.especificacion[x].TIPO == "TP_PASSWORD")
                continue;
            let flag = 1;
            if (this.objeto.IDIOMAS !== undefined) {
                if (this.objeto.IDIOMAS[ x ] !== undefined) {
                    for (let y in this.objeto.IDIOMAS[ x ].ELEMENT) {
                        flag = 0;
                        names = {
                            element : x,
                            id : identifierNAME,
                            multiple : identifier,
                            idioma : y
                        };
                        ARR_names.push(this.constructorNames(names));
                    }
                }
            }
            if (flag) {
                names = {
                    element : x,
                    id : identifierNAME,
                    multiple : identifier
                };
                ARR_names.push(this.constructorNames(names));
            }
        }
        window.ARR_names = window.ARR_names.concat(...ARR_names);

        ARR_names.forEach(element => {
            let x = element.element.element;
            let name = element.idElementForm;
            let flag = 1;
            let value = data[x];
            if (element.element.idioma)
                value = value[element.element.idioma];
            if(CKEDITOR_) {
                if( CKEDITOR_.instances[ name ] !== undefined ) {
                    CKEDITOR_.instances[ name ].setData( value );
                    flag = 0;
                }
            }
            if (flag) {
                if (this.especificacion[ x ]) {
                    switch (this.especificacion[ x ].TIPO) {
                        case "TP_FILE":
                            file = value;
                            if( file !== null ) {
                                link = `<a target="blank" class="text-primary" href="${url_simple}/${file.i}">${url_simple}/${file.i}</a>`;
                                f = `<p class="w-100"><strong>Extensión:</strong> ${file.e.toUpperCase()}</p>`;
                                f += `<p class="text-truncate w-100"><strong>Link:</strong> ${link}</p>`;
                                $( `#${name}` ).closest( ".input-group" ).find( "+ .input-group-text" ).html( f )
                                $( `#${name}` ).closest( ".input-group" ).find(".imgURL").val(`${file.i}`);
                            }
                        break;
                        case "TP_BLOB":
                            element = `data:${data.mime};base64,${value}`;
                            $( `#src-${name}` ).attr( "src" , element );
                            $( `#src-${name}-2` ).attr( "src" , element );
                        break;
                        case "TP_IMAGE":
                            let ul = "";
                            date = new Date();
                            image = value;
                            img = "";
                            if( image !== null ) {
                                if( typeof image == "object" )
                                    image = image.i;
                                if( url.substr(-1) != "/" )
                                    url += "/";
                                img = `${url}${image}`;
                            }
                            ul = `<ul class="image--wh image--wh__details"><li><strong>Ubicación:</strong> <a href="${img}" target="blank">${img}</a></li></ul>`;
                            if( img != "" ) {
                                img += `?t=${date.getTime()}`;
                                document.querySelector(`#${element.idElementForm}_image`).previousElementSibling.innerHTML += ul;
                                document.querySelector(`#${element.idElementForm}_image`).src = img;
                            }
                        break;
                        case "TP_CHECK":
                            if( value !== null ) {
                                $( `#${name}` ).prop( "checked" , true );
                                $( `#${name}_input` ).val( 1 );
                            }
                        break;
                        case "TP_ENUM":
                            if( this.especificacion[x].NOT_TRIGGER === undefined )
                                $( `#${name}` ).val( value ).trigger( "change" );
                            else
                                $( `#${name}` ).val( value );
                            if( $( `#${name}.selectpicker` ).length )
                                $( `#${name}.selectpicker` ).selectpicker( 'refresh' );
                        break;
                        case "TP_FECHA":
                            if( value !== null ) {
                                regexData = /([0-9]{4})-([0-9]{2})-([0-9]{2})/;
                                match = regexData.exec(value);
                                $( `#${name}` ).val(match[0]).trigger( "change" );
                            }
                        break;
                        default:
                            $( `#${name}` ).val( value ).trigger( "change" );
                    }
                }
            }
        });
    };
    this.formulario = (id = "", multiple = null) => {
        if( this.objeto === null )
            return "";
        console.group();
        console.info( `### CONSTRUYENDO FORMULARIO ###` );
        console.table( [ { Entidad : this.entidad } ] );
        console.groupEnd();

        if( this.objeto[ 'FORM' ] === undefined )
            return "";
        try {
            let formulario = "";
            let STR_class = "";
            let OBJ_funciones = {}
            let ARR_form = Object.assign([], this.objeto.FORM);

            if (this.objeto.FORM_CLASS)
                STR_class = this.objeto.FORM_CLASS;

            if (this.objeto.FUNCIONES)
                OBJ_funciones = this.objeto.FUNCIONES;

            ARR_form.forEach(rowElements => {
                let element_row = document.createElement("div");
                element_row.classList.add("row", "justify-content-center");
                for(let i in rowElements) {
                    let row = i;
                    let rowElementos = rowElements[i];
                    rowElementos.forEach( e => {
                        if(this.especificacion[e] === undefined && e != "BTN") {
                            console.warn(`ELEMENTO "${e}" NO ENCONTRADO *** Revise declaration.js`);
                            return false;
                        }
                        let aux = "";
                        let OBJ_funcion = {};
                        if (OBJ_funciones[e] !== undefined)
                            OBJ_funcion = this.objeto['FUNCIONES'][e];
                        if(e != "VACIO") {
                            especificacion = this.especificacion[e]
                            if (this.objeto.IDIOMAS) {
                                if (this.objeto.IDIOMAS[e]) {
                                    for( let j in this.objeto.IDIOMAS[ e ].ELEMENT ) {
                                        placeholder = especificacion.NOMBRE === undefined ? e : especificacion.NOMBRE;
                                        placeholder = placeholder.toUpperCase();
                                        placeholder += ` ${this.objeto.IDIOMAS[ e ].ELEMENT[ j ]}`;

                                        auxR = this.objeto.IDIOMAS[ e ].FORM;
                                        auxX = this.inputAdecuado(especificacion, `${e}_${j}`, id, OBJ_funcion, placeholder , multiple , e );
                                        if(this.objeto.PLACEHOLDER !== undefined)
                                            auxX += `<label for="">${especificacion.PLACEHOLDER === undefined ? especificacion.NOMBRE : especificacion.PLACEHOLDER}</label>`;
                                        auxR = auxR.replace(`/${e}/`,auxX);
                                        aux += auxR;
                                    }
                                }
                            }
                            if (aux === "")
                                aux = this.inputAdecuado(especificacion, e, id, OBJ_funcion, especificacion.PLACEHOLDER === undefined ? "" : especificacion.PLACEHOLDER, multiple, e);
                            //auxHTML = row;
                        }
                        //if(auxHTML == "") auxHTML = row;

                        if(row.indexOf(e) >= 0)
                            row = row.replace(`/${e}/`,aux);
                    }, this);
                    element_row.innerHTML += row;
                }
                formulario += element_row.outerHTML;
            }, this);
            if( multiple !== null )
                formulario = `<input type="hidden" value="" class="remove-element" name="${this.name}_${multiple}[]"/>${formulario}`;

            return `<div class="contenedorForm w-100" id="form_${this.entidad + (id != "" ? "_" + id : "")}">${formulario}</div>`;
        } catch (error) {
            console.group();
            console.error( "#### ERROR en el formato" );
            console.error( error );
            console.table( [ { Ver : 'Verificar declaration.js v:2', Entidad : this.entidad } ] );
            console.groupEnd();
            return "Error en el armado";
        }
    };
    /**
     *
     */
    this.inputAdecuado = ( Object_ , element_name , id_name , OBJ_funcion , placeholder , multiple_name = null , e ) => {
        console.log(e)
        let names = {
            element : element_name,
            id : id_name,
            multiple : multiple_name
        };

        if( Object_.NOMBRE === undefined )
            Object_.NOMBRE = element_name;
        if( Object_.NAME === undefined )
            Object_.NAME = element_name;
        if( placeholder === undefined )
            placeholder = "";
        if( this.objeto.MINUSCULA === undefined )
            Object_.NOMBRE = (Object_.NOMBRE).toUpperCase();

        if( Object_.VISIBILIDAD == 'TP_VISIBLE' || Object_.VISIBILIDAD == 'TP_VISIBLE_FORM' ) {
            switch( Object_.TIPO ) {
                case 'TP_LIST':
                    return this.listDatails(Object_, names, BJ_funcion, placeholder);
                case 'TP_ENTERO':
                    return this.inputString(Object_, names, "number", OBJ_funcion, placeholder);
                case 'TP_LINK':
                    return this.inputString(Object_, names, "url", OBJ_funcion, placeholder);
                case 'TP_CHECK':
                    return this.check( Object_ , names ,BJ_funcion );
                case 'TP_MONEY':
                    return this.money( Object_ , names ,BJ_funcion,placeholder );
                case 'TP_PHONE':
                    return this.inputString(Object_, names, "phone", OBJ_funcion, placeholder);
                case 'TP_EMAIL':
                    return this.inputString(Object_, names, "email", OBJ_funcion, placeholder);
                case 'TP_COLOR':
                    return this.inputColor( Object_ , names ,  OBJ_funcion , placeholder );
                case 'TP_IMAGE':
                    return this.inputImage(Object_, names, OBJ_funcion);
                case 'TP_FILE':
                    return this.inputString(Object_, names, "file", OBJ_funcion, placeholder);
                case 'TP_STRING':
                    return this.inputString(Object_, names, "text", OBJ_funcion, placeholder);
                case 'TP_TEXT':
                    return this.inputText(Object_, names, OBJ_funcion, placeholder);
                case 'TP_FECHA':
                    return this.inputString(Object_, names, "date", OBJ_funcion, placeholder);
                case 'TP_PASSWORD':
                    return this.inputString(Object_, names, "password", OBJ_funcion, placeholder);
                case 'TP_ENUM':
                    return this.select(Object_, names, OBJ_funcion, placeholder);
                default:
                    return this.inputString(Object_, names, "text", OBJ_funcion, placeholder);
            }
        } else return this.inputHidden( Object_ , names );
    };
    /**
     * @var names @type object
     * @var addName @type string
     */
    /**
     * @var names @type object
     * @var addName @type string
     */
    this.constructorNames = ( names , addName = null ) => {
        let Arr = {};
        Arr.element = names;
        Arr.nameElementForm = `${this.name}_${names.element}`;
        Arr.idElementForm = `${this.name}_${names.element}`;

        Arr.nameURLForm = `${this.name}_${names.element}_URL`;
        Arr.idURLForm = `${this.name}_${names.element}_URL`;

        if( names.idioma !== undefined ) {
            Arr.nameElementForm += `_${names.idioma}`;
            Arr.idElementForm += `_${names.idioma}`;
        }
        if( addName !== null ) {
            Arr[ `${addName}NameElementForm`] = `${this.name}_${names.element}_${addName}`;
            Arr[ `${addName}ElementForm`] = `${this.name}_${names.element}_${addName}`;
            if( names.idioma !== undefined ) {
                Arr[ `${addName}NameElementForm`] += `_${names.idioma}`;
                Arr[ `${addName}ElementForm`] += `_${names.idioma}`;
            }
        }

        if( names.multiple !== null ) {
            if( addName !== null ) {
                Arr[ `${addName}NameElementForm`] = `${this.name}_${names.multiple}_${names.element}`;
                Arr[ `${addName}ElementForm`] = `${this.name}_${names.multiple}_${names.element}`;

                if( names.idioma !== undefined ) {
                    Arr[ `${addName}NameElementForm`] += `_${names.idioma}`;
                    Arr[ `${addName}ElementForm`] += `_${names.idioma}`;
                }
            }

            Arr.nameElementForm = `${this.name}_${names.multiple}_${names.element}`;
            Arr.idElementForm = `${this.name}_${names.multiple}_${names.element}`;

            Arr.nameURLForm = `${this.name}_${names.multiple}_${names.element}_URL`;
            Arr.idURLForm = `${this.name}_${names.multiple}_${names.element}_URL`;

            if( names.idioma !== undefined ) {
                Arr.nameElementForm += `_${names.idioma}`;
                Arr.idElementForm += `_${names.idioma}`;
            }
        }
        if( names.id !== null ) {
            if( names.id != "" ) {
                if( names.multiple !== null ) {
                    if( names.idioma !== undefined )
                        Arr.nameElementForm += `_${names.idioma}`;
                    Arr.nameElementForm += `[]`;
                    Arr.nameURLForm += `[]`;
                } else {
                    Arr.nameElementForm += `_${names.id}`;
                    Arr.nameURLForm += `_${names.id}`;

                    if( names.idioma !== undefined )
                        Arr.nameElementForm += `_${names.idioma}`;
                }
                Arr.idElementForm += `_${names.id}`;
                Arr.idURLForm += `_${names.id}`;

                if( addName !== null ) {
                    Arr[ `${addName}NameElementForm`] += `_${addName}[]`;
                    Arr[ `${addName}ElementForm`] += `_${names.id}_${addName}`;
                }
            }
        }

        return Arr;
    };
    /**
     * @var function_ @type object
     */
    this.constructorFunction = ( function_ , STR_id ) => {
        let aux = "";
        if(function_ === null) return null;

        for( let i in function_ ) {
            if( typeof function_[ i ] == "string" ) {
                if( aux != "" ) aux += " ";
                aux += `${i}="${function_[ i ]}"`;
            } else {
                if( aux != "" ) aux += " ";
                let auxFunction = function_[ i ].F;
                auxFunction = auxFunction.replace(`/${function_[ i ].C}/`,`src-${STR_id}`);

                aux += `${i}="${auxFunction}"`;
            }
        }
        return aux;
    };
    //
    this.label = (id, nombre) => {
        label = document.createElement("label");
        label.classList.add("form--label");
        label.setAttribute("for", id);
        label.textContent = nombre;
        return label.outerHTML;
    };
    this.help = inner => {
        help = document.createElement("small");
        help.classList.add("form-text", "text-muted");
        help.innerHTML = inner;
        return help.outerHTML;
    };
    //-----------
    this.inputImage = (Object_, names, OBJ_funcion) => {
        let contenedorImage = document.createElement("label");
        let aviso = document.createElement("label");
        let aviso_input = document.createElement("input");
        let element = document.createElement("input");
        let image = document.createElement("img");
        let hidden = document.createElement("input");
        let span = document.createElement("span");
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        let attr = document.createElement("details");
        let attr_html = "";
        attr.classList.add("image--upload__attr");
        attr_html += `<summary>Detalles de la imagen</summary>`;
        attr_html += "<ul class='image--wh'>";
        if (Object_.WIDTH) {
            attr_html += `<li>Ancho [${Object_.WIDTH}]</li>`;
            image.style.width = Object_.WIDTH;
        }
        if (Object_.HEIGHT) {
            attr_html += `<li>Alto [${Object_.HEIGHT}]</li>`;
            image.style.height = Object_.HEIGHT;
        }
        attr_html += "</ul>";
        if (Object_.EXT)
            attr_html += `<ul class='image--wh'><li><strong>Extensiones permitidas:</strong> ${Object_.EXT}</li></ul>`;
        attr.innerHTML = attr_html;
        hidden.type = "hidden";
        hidden.classList.add("imgURL");
        span.innerHTML = "📂";
        span.dataset.name = "No se seleccionó ningún archivo";
        image.src = "";
        image.setAttribute("onError", `this.src='${src}'`);
        image.classList.add("image--upload__img");
        element.type = "file";
        contenedorImage.classList.add("image--upload");
        contenedorImage.appendChild(element);
        contenedorImage.appendChild(span);
        if (Object_.NECESARIO)
            element.required = true;
        if (Object_.DISABLED)
            element.disabled = true;
        if (Object_.ACCEPT)
            element.setAttribute("accept", Object_.ACCEPT);
        Arr = this.constructorNames(names, "check");
        aviso.classList.add("check");
        aviso_input.type = "checkbox";
        aviso_input.setAttribute("onchange", "check(this)");
        aviso.appendChild(aviso_input);
        aviso.innerHTML += `<input name="${Arr.checkNameElementForm}" value="0" type="hidden"/><div>¿Mantener nombre del archivo?</div>`;
        image.id = `${Arr.idElementForm}_image`;
        element.id = Arr.idElementForm;
        element.name = Arr.nameElementForm;
        element.setAttribute("onchange", `readURL(this, '${Arr.idElementForm}_image')`);
        hidden.id = Arr.idURLForm;
        hidden.name = Arr.nameURLForm;
        STR_funcion = this.constructorFunction( OBJ_funcion , Arr.idElementForm );
        return attr.outerHTML + image.outerHTML + aviso.outerHTML + contenedorImage.outerHTML + help;
    };
    this.inputString = (Object_, names, STR_type, OBJ_funcion = null, placeholder = "") => {
        let element = document.createElement("input");
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        let label = null;
		if (Object_.NECESARIO)
            element.required = true;
        if (Object_.DISABLED)
            element.disabled = true;
        if (Object_.MAXLENGTH)
            element.maxLength = Object_.MAXLENGTH;
        if (Object_.DEFAULT)
            element.value = Object_.DEFAULT;
        element.type = STR_type;
        switch (STR_type) {
            case "number":
                element.min = 0;
            break;
            case "password":
            break;
            case "text":
            break;
            case "date":
            break;
        }
        element.classList.add("form-control","form--input")
        if (Object_.CLASS)
            element.classList.add(...Object_.CLASS.split(" "));

        Arr = this.constructorNames(names);
        STR_funcion = this.constructorFunction(OBJ_funcion, Arr.idElementForm);
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.placeholder = placeholder === "" ? Object_.NOMBRE : placeholder;

        if(Object_.LABEL)
            label = this.label(Arr.idElementForm, Object_.NOMBRE);
        return (label ? label : "") + element.outerHTML + help;
    };
    //-----------
    this.check = ( OBJ_elemento , names , STR_class , OBJ_funcion = null ) => {
        let STR_funcion = "";
        let necesario = 0;
        let inputData = "";
        let input = "";
		if(OBJ_elemento.NECESARIO !== undefined) necesario = OBJ_elemento.NECESARIO;
        if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;

        if(STR_class == "form-control") STR_class = "";
        if(STR_class != "") STR_class += " ";
        if(OBJ_elemento.CLASS !== undefined) {
            if(STR_class != "") STR_class += " ";
            STR_class += OBJ_elemento.CLASS;
        }
        if(necesario)
            inputData = "required='true'";

        Arr = this.constructorNames( names , 'input' );
        STR_funcion = this.constructorFunction( OBJ_funcion , Arr.idElementForm );
        if( STR_funcion == "" )
            STR_funcion = 'onchange="check( this );"';
        if(inputData != "") inputData += " ";
        inputData += STR_funcion;

        input += `<div class="form-check">`;
            input += `<label class="form-check-label ml-2" for="${Arr.idElementForm}">`;
            input += `<input value="${OBJ_elemento.DEFAULT !== undefined ? OBJ_elemento.DEFAULT : '1'}" ${(OBJ_elemento["DISABLED"] ? "disabled='true'" : "")} ${inputData} name="${Arr.nameElementForm}" id="${Arr.idElementForm}" class="${STR_class}" type="checkbox" >`;
            input += `<input name="${Arr.inputNameElementForm}" value="0" id="${Arr.inputElementForm}" type="hidden" >`;
            input += ` ${OBJ_elemento.CHECK}</label>`;
        input += `</div>`;

        return input;
    };
    this.inputHidden = ( Object_ , names ) => {
        Arr = this.constructorNames( names );
        return `<input value="${Object_.DEFAULT !== undefined ? Object_.DEFAULT : ''}" name="${Arr.nameElementForm}" id="${Arr.idElementForm}" type="hidden" />`;
    };

    this.listDatails = (OBJ_elemento, names, STR_class, OBJ_funcion = null , placeholder = "" ) => {
        let STR_funcion = "";
        let necesario = 0;
        if(OBJ_elemento.NECESARIO !== undefined) necesario = OBJ_elemento.NECESARIO;
        if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;
        if(OBJ_elemento.LABEL === undefined) OBJ_elemento.LABEL = 0;

        STR_funcion = this.constructorFunction( OBJ_funcion );

        if(OBJ_elemento.CLASS !== undefined) {
            if(STR_class != "") STR_class += " ";
            STR_class += OBJ_elemento.CLASS;
        }

        Arr = this.constructorNames( names );

        list = `<input list="${Arr.idElementForm}s" ${(OBJ_elemento.DISABLED ? "disabled='true'" : "")} ${STR_funcion} name="${Arr.nameElementForm}" id="${Arr.idElementForm}" class="${STR_class}" placeholder="${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}">`;

        list += `<datalist id="${Arr.idElementForm}s">`;
        if (dataPYRUS[OBJ_elemento.NAME].DATA) {
            auxList = dataPYRUS[OBJ_elemento.NAME].DATA.map( x => {
                return `<option value="${x.v}">`;
            });
            list += auxList.join("");
        }
        list += `</datalist>`;
        if(OBJ_elemento.LABEL)
            list = `<label for="${Arr.idElementForm}">${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}</label>${list}`;
        if( OBJ_elemento.HELP !== undefined )
            list += `<small class="form-text text-muted">${OBJ_elemento.HELP}</small>`;
        if(OBJ_elemento.FIELDSET !== undefined)
            return `<fieldset><legend>${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}</legend>${list}</fieldset>`;
		return list;
    };

    this.money = ( Object_ , names , STR_class , OBJ_funcion = null , placeholder = "" ) => {
        let STR_funcion = "";
        let inputData = "";
		if( Object_.NECESARIO === undefined ) Object_.NECESARIO = 0;
        if( Object_.DISABLED === undefined ) Object_.DISABLED = 0;
        if( Object_.LABEL === undefined ) Object_.LABEL = 0;

        if( STR_class != "" ) STR_class += " ";

        if( Object_.CLASS !== undefined ) {
            if( STR_class != "" ) STR_class += " ";
            STR_class += Object_.CLASS;
        }
        if( Object_.NECESARIO )
            inputData = "required='true'";
        if( Object_.MAXLENGTH !== undefined ) {
            if( inputData != "" ) inputData += " ";
            inputData += `maxlength="${Object_.MAXLENGTH}"`;
        }
        Arr = this.constructorNames( names , 'button' );

        STR_funcion = this.constructorFunction( OBJ_funcion , Arr.idElementForm );

        if( STR_funcion !== null ) {
            if( inputData != "" )
                inputData += " ";
            inputData += STR_funcion;
        }
        input = `<input value="${Object_.DEFAULT !== undefined ? Object_.DEFAULT : ''}" ${(Object_["DISABLED"] ? "disabled='true'" : "")} ${Object_.READONLY === undefined ? '' : 'readonly'} ${inputData} name="${Arr.nameElementForm}" id="${Arr.idElementForm}" class="${STR_class} maskMoney" type="text" data-symbol="$ " data-thousands="." data-decimal="," placeholder="${placeholder == "" ? Object_["NOMBRE"] : placeholder}" />`;

        if( Object_.HELP !== undefined )
            input += `<small class="form-text text-muted">${Object_.HELP}</small>`
        if(Object_.LABEL)
            input = `<div class="form-label-group mb-0">${input}<label for="${Arr.idElementForm}" class="form-adm">${placeholder == "" ? Object_["NOMBRE"] : placeholder}</label></div>`;
        if(Object_.FIELDSET !== undefined)
            return `<fieldset><legend>${placeholder == "" ? Object_.NOMBRE : placeholder}</legend>${input}</fieldset>`;
        return input;
    };
    this.inputColor = ( OBJ_elemento , names , STR_class , OBJ_funcion = null , placeholder = "" ) => {
        let STR_funcion = "";
        let necesario = 0;
        let inputData = "";
		if(OBJ_elemento.NECESARIO !== undefined) necesario = OBJ_elemento.NECESARIO;
        if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;
        if(OBJ_elemento.LABEL === undefined) OBJ_elemento.LABEL = 0;

        if(STR_class != "") STR_class += " ";

        if(OBJ_elemento.CLASS !== undefined) {
            if(STR_class != "") STR_class += " ";
            STR_class += OBJ_elemento.CLASS;
        }
        if(necesario)
            inputData = "required='true'";
        if(OBJ_elemento.MAXLENGTH !== undefined) {
            if(inputData != "") inputData += " ";
            inputData += `maxlength="${OBJ_elemento.MAXLENGTH}"`;
        }

        Arr = this.constructorNames( names , 'color' );
        STR_funcion = this.constructorFunction( OBJ_funcion , Arr.colorElementForm );
        STR_funcion += ` onchange="changeColor(this, '${Arr.colorElementForm}');"`;
        if( STR_funcion !== null ) {
            if( inputData != "" )
                inputData += " ";
            inputData += STR_funcion;
        }

        input = `<div class="input-group">`;
            input += `<input value="${OBJ_elemento.DEFAULT !== undefined ? OBJ_elemento.DEFAULT : ''}" ${(OBJ_elemento["DISABLED"] ? "disabled='true'" : "")} ${OBJ_elemento.READONLY === undefined ? '' : 'readonly'} ${inputData} name="${Arr.nameElementForm}" id="${Arr.idElementForm}" class="${STR_class}" type="color" placeholder="${placeholder == "" ? OBJ_elemento["NOMBRE"] : placeholder}" />`;
            input += `<input type="text" class="form-control text-right" pattern="^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$" value="#000000" onfocus="this.select()" onchange="changeColor(this, '${Arr.idElementForm}');" id="${Arr.colorElementForm}"/>`;
        input += `</div>`;
        if( OBJ_elemento.HELP !== undefined )
            input += `<small class="form-text text-muted">${OBJ_elemento.HELP}</small>`;
        if(OBJ_elemento.LABEL)
            input = `<div class="form-label-group mb-0">${input}<label for="${Arr.idElementForm}" class="form-adm">${placeholder == "" ? Object_["NOMBRE"] : placeholder}</label></div>`;
        if(OBJ_elemento.FIELDSET !== undefined)
            return `<fieldset><legend>${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}</legend>${input}</fieldset>`;
        return input;
    };
    this.inputText = (Object_, names, OBJ_funcion, placeholder) => {
        let element = document.createElement("textarea");
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        if (Object_.NECESARIO)
            element.required = true;
        if (Object_.DISABLED)
            element.disabled = true;
        if (Object_.MAXLENGTH)
            element.MAXLENGTH = Object_.MAXLENGTH;
        STR_funcion = this.constructorFunction( OBJ_funcion );
        if (Object_.CLASS)
            element.classList.add(...Object_.CLASS.split(" "));
        element,classList.add("ckeditor", "form--input");
        Arr = this.constructorNames( names );
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.placeholder = placeholder === "" ? Object_.NOMBRE : placeholder;

        if(Object_.LABEL)
            label = this.label(Arr.idElementForm, Object_.NOMBRE);
        return (label ? label : "") + element.outerHTML + help;
    };
    this.select = (Object_, names, OBJ_funcion) => {
        let element = document.createElement("select");
        let label = null;
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
		let STR_funcion = "";
        if (Object_.MULTIPLE)
            element.multiple = true;
        if (Object_.DISABLED)
            element.disabled = true;

		STR_funcion = this.constructorFunction(OBJ_funcion);
        if (Object_.CLASS)
            element.classList.add(...Object_.CLASS.split(" "));
        element.classList.add("select__2");
        Arr = this.constructorNames(names);
        Arr.nameElementForm += Object_["MULTIPLE"] ? "[]" : "";
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.dataset.width = "100%";
        element.dataset.liveSearch = true;
        element.title = Object_.NOMBRE

        if(Object_.ENUM) {
            console.log(Object_.ENUM)
            Object_.ENUM.forEach(o => {
                let opt = document.createElement("option");
                opt.value = o.id;
                opt.text = o.text;
                element.appendChild(opt);
            });
        } else {
            if(dataPYRUS !== null) {
                if (dataPYRUS[Object_.NAME]) {
                    dataPYRUS[Object_.NAME].forEach(o => {
                        let opt = document.createElement("option");
                        opt.value = o.id;
                        opt.text = o.text;
                        element.appendChild(opt);
                    });
                }
            }
        }
        if(Object_.LABEL)
            label = this.label(Arr.idElementForm, Object_.NOMBRE);
		return (label ? label : "") + element.outerHTML + help;
	};

    /* ----------------- */
	return this.constructor();
}
