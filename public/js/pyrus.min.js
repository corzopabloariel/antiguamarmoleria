/**
 * @param e - entidad perteneciente al array de entidades definido en declaration.js
 * @param dataPYRUS - permite completar datos TP_ENUM. { K : V }
 * @param src - dirección de imagen por defecto
 * @param modify - modifica el tipo de elemento de una entidad. { K : V } - Ver archivo declaration.js para los formatos
 * -----------------------------------------/
 * Herramienta para armado de formularios
 * Cada Formulario es único, las entidades anteponen su nombre a cada FORM
 * Función que construye los names e id de los elementos del FORM
 * Las entidades con EDITOR RICO pueden configurarse en el archivo DECLARATION con valores sacados de https://ckeditor.com/latest/samples/toolbarconfigurator/index.html#advanced
 *
 * Log más específicos
 * FOLDER para elementos TIPO ARCHIVOS
 * LINK en elementos TP_EMAIL
 * Formato moneda en elementos TP_MONEY
 * Se puede eliminar un elemento característica de la entidad
 * Doble imagen en fondo claro y oscuro, para elementos transparentes donde podían perderse con el fondo único
 * Se modificó la lista de colores de campos EDITOR
 * Identificación de los TP_FECHA y conversión a formato dd/mm/yyyy ...
 * Las imágenes tienen un campo oculto con su ubicación
 * Elemento único para links de Youtube
 * Más elementos tipo fecha
 * -----------------------------------------/
 * @date 02.2020
 * @last_change 20.02.2020
 * @version 0.2.6.0
 */
Pyrus = function (e = null, dataPYRUS = null, modify = null) {
	this.entidad = e;
    this.objeto = null;
    this.name = null;
    this.tableDB = null;
    this.especificacion = null;
    this.objetoSimple = null;

    this.constructor = () => {
        console.time( "Time this" );
		if( this.entidad === null || this.entidad === "" ) {
			console.warn( "AVISO: No se ha pasado ninguna entidad. Uso limitado" );
			return false;
		}
        /* ------------------- */
        if( ENTIDADES[ this.entidad ] === undefined ) {
            console.warn( `AVISO: Entidad "${this.entidad}" no encontrada` );
			return false;
        }
        this.objeto = ENTIDADES[ this.entidad ];
        this.especificacion = this.objeto.ATRIBUTOS;
        this.name = e;
        this.tableDB = this.objeto.TABLE === undefined ? e : this.objeto.TABLE;
        /* ------------------- */
        this.getEspecificacion();
        console.timeEnd( "Time this" );
    };
    /**
     * @deprecated
     */
    this.objetoLimpio = () => {
		let r = {};
		for( var i in this.especificacion ) {
			r[ i ] = null;
		}
		return r;
    };
    /**
     * @description Construye conjuntos de elementos de la cabecera de la tabla
     * @returns @type Array
     */
    this.columnas = () => {
        let Arr = [];
        for( let x in this.especificacion ) {
            if( this.especificacion[ x ].VISIBILIDAD != "TP_VISIBLE" && this.especificacion[ x ].VISIBILIDAD != "TP_VISIBLE_TABLE" )
                continue;
            width_ = "auto";
            class_ = "";
            name_ = x.toUpperCase();
            if( this.especificacion[ x ].NOMBRE !== undefined )
                name_ = this.especificacion[ x ].NOMBRE.toUpperCase();
            if( this.especificacion[ x ].WIDTH !== undefined && this.especificacion[ x ].TABLE === undefined )
                width_ = this.especificacion[ x ].WIDTH;
            else {
                if( this.especificacion[ x ].TABLE !== undefined )
                    width_ = this.especificacion[ x ].TABLE;
            }
            if( this.especificacion[ x ].CLASS !== undefined )
                class_ = this.especificacion[ x ].CLASS
            Arr.push( { NAME: name_ , COLUMN: x , WIDTH: width_ , CLASS: class_ } );
        }
        return Arr;
    };
    /**
     * @description Crea cabecera de tabla
     * @param columns @type array c/parámetros de la cabecera de la tabla
     * @param replace @type boolean reemplaza cabecera completa o adiciona
     * @returns string
     */
    this.table = ( columns = null , replace = false ) => {
        let columnsDATA = this.columnas();
        let tableHTML = "";

        tableHTML += `<thead class="thead-dark">`;
        if( replace ) {
            if( columns !== null ) {
                columns.forEach( function( e ) {
                    tableHTML += `<th style="width:${e.WIDTH}; max-width: 500px;">${e.NAME}</th>`;
                });
            }
        } else {
                columnsDATA.forEach( function( e ) {
                    let flag = 1;
                    tableHTML += `<th style="width:${e.WIDTH}; max-width: 500px;">${e.NAME}</th>`;
                }, this);
            if(columns !== null) {
                columns.forEach( function( e ) {
                    tableHTML += `<th style="width:${e.WIDTH}; max-width: 500px;">${e.NAME}</th>`;
                });
            }
        }
        tableHTML += `</thead>`;

        return `<div class="table-responsive"><table id="tabla" class="table table-striped table-hover table-borderless mb-0">${tableHTML}<tbody></tbody></table></div>`;
    };

    this.getEspecificacion = () => {
        this.objetoSimple = {};
        this.objetoSimple["name"] = this.name;
        this.objetoSimple["especificacion"] = {};
        this.objetoSimple["detalles"] = {};
        this.objetoSimple["rules"] = {};
        this.objetoSimple["sorteable"] = null;
        for (let x in this.especificacion) {
            if (this.especificacion[x].SORTEABLE)
                this.objetoSimple["sorteable"] = x;
            if (this.especificacion[x].RULE)
                this.objetoSimple["rules"][x] = this.especificacion[ x ].RULE;
            if (this.especificacion[x].HIDDEN)
                continue;
            this.objetoSimple[ "especificacion" ][ x ] = this.especificacion[ x ].TIPO;
            switch (this.especificacion[x].TIPO) {
                case "TP_FILE":
                case "TP_IMAGE":
                case "TP_BLOB":
                    this.objetoSimple["detalles"][x] = {
                        FOLDER: this.especificacion[x].FOLDER === undefined ? this.name : this.especificacion[x].FOLDER
                    };
                    break;
                case "TP_CAST":
                    this.objetoSimple["detalles"][x] = {
                        CAST: this.especificacion[x].CAST === undefined ? null : this.especificacion[x].CAST
                    };
                    break;
                case "TP_PASSWORD":
                    this.objetoSimple["detalles"][x] = {
                        PASSWORD: 1
                    };
                    break;
            }
        }
    };
    this.clean = () => {
        let list = document.querySelectorAll(".image--wh__details");
        if (list.length > 0)
            Array.prototype.forEach.call(list, l => l.remove());
        for(let e in window.pyrus_ids) {
            window.pyrus_ids[e].forEach(i => {
                let flag = 1;
                let element = document.querySelector(`#${i}`);
                if (CKEDITOR) {
                    if (CKEDITOR.instances[`${i}`]) {
                        CKEDITOR.instances[`${i}`].setData('');
                        flag = 0;
                    }
                }
                if (flag) {
                    if (element) {
                        element.value = "";
                        if (element["onchange"])
                            element.onchange();
                    }
                }
            });
        }
    };
    this.delete = ( t , alertify_ , url , id ) => {
        t.disabled = true;
        $( '[data-toggle="tooltip"]' ).tooltip( 'hide' );
        Swal.fire({
            title: alertify_.title,
            text: alertify_.body,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirmar'
        }).then(result => {
            if (result.value) {
                axios.delete(url, { params : { id : id } } )
                .then(res => {
                    if (res.data.error === 0) {
                        if (res.data.success) {
                            Swal.fire(
                                'Contenido eliminado!',
                                'Registro dado de baja.',
                                'success'
                            )
                            setTimeout(() => {
                                location.reload();
                            }, 500);
                        }
                    } else {
                        Swal.fire(
                            'Atención',
                            'Ocurrió un error al eliminar. Reintente',
                            'error'
                        )
                    }
                }).catch(err => {
                    console.error(err);
                    t.disabled = false;
                    Swal.fire(
                        'Atención',
                        'Ocurrió un error interno.',
                        'error'
                    )
                }).then(function() {
                    t.disabled = false;
                });
            }
        });
    };
    /**
     * @type object CKEDITOR
     */
    this.editor = (id = "", multiple = null) => {
        if (this.objeto.EDITOR === undefined) {
            console.error( "#### SIN CARACTERÍSTICAS DE EDITOR" );
            return null;
        }
        for (let x in this.objeto.EDITOR) {
            names = {
                element : x,
                id : id,
                multiple : multiple
            };
            Arr = this.constructorNames(names);
            e = this.objeto.EDITOR[x];
            e["on"] = {
                change: function(evt) {
                    changeCkeditor(x, evt);
                }
            }
            if (CKEDITOR.instances[Arr.idElementForm])
                CKEDITOR.instances[Arr.idElementForm].destroy();
            CKEDITOR.replace(`${Arr.idElementForm}`, e);
        }
    };
    this.card = (url, data, buttonsOK = ["c", "e", "d" ]) => {
        const columns = this.columnas();
        let html = "";
        let dataAUX = data;
        if( data === null ) {
            console.error( "#### SIN ELEMENTOS - En la base ####" );
            return null;
        }
        if( data.current_page !== undefined ) {
            data = data.data;
            dataAUX = data;
            console.warn( "### PAGINADO ACTIVO ####" );
        }
        console.info( "### CONSTRUYENDO CARDS ####" );

        if( !Array.isArray(data) )
            dataAUX = Object.keys( data );
        formatter = new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS',
        });
        dataAUX.map( x => {
            id = null;
            if( !Array.isArray(data) ) {
                id = x;
                x = data[ x ];
            } else {
                if( x.id !== undefined )
                    id = x.id;
            }
            let elements = columns.map(y => {
                let td = document.createElement("div");
                return this.convert(x[y.COLUMN], td, url, this.especificacion[y.COLUMN].TIPO, this.especificacion[y.COLUMN], x, y).outerHTML;
            });
            html += `<div class="card">`;
                html += `<div class="card-body">${elements.join("")}</div>`;
                html += `<div class="card-footer">`;
                    html += `<div class="d-flex justify-content-center">`;
                    if( buttonsOK.indexOf( "c" ) >= 0 )
                        html += `<button data-toggle="tooltip" data-placement="left" title="Copiar elemento" style="font-size: 12px;" onclick="clone(this,'${id}')" class="btn text-center btn-info rounded-0" disabled><i class="far fa-clone"></i></button>`;
                    if( buttonsOK.indexOf( "e" ) >= 0 )
                        html += `<button data-toggle="tooltip" data-placement="left" title="Editar elemento" style="font-size: 12px;" onclick="edit(this,'${id}')" class="btn text-center rounded-0 btn-warning"><i class="fas fa-pencil-alt"></i></button>`;
                    if( buttonsOK.indexOf( "d" ) >= 0 )
                        html += `<button style="font-size: 12px;" data-toggle="tooltip" data-placement="left" title="Eliminar elemento" onclick="erase(this,'${id}')" class="btn text-center rounded-0 btn-danger"><i class="fas fa-trash-alt"></i></button>`;
                    html += `</div>`;
                html += `</div>`;
            html += `</div>`;
        }, this);
        return html;
    };
    this.convert = (value, target, url, type, specification, elements, column) => {
        if (value === null) {
            target.textContent = `SIN "${specification.NOMBRE}"`;
            return target;
        }
        switch(type) {
            case "TP_IMAGE":
                date = new Date();
                info = value.d;
                if( value.e == "mp4" ) {
                    value = value.i;
                    videoURL = value == "" ? value : `${url}/${value}`;
                    w = specification.WIDTH === undefined ? "auto" : ( specification.TABLE !== undefined ? specification.TABLE : specification.WIDTH );
                    value = `<video style="width: ${w};" class="d-block mx-auto" controls>`;
                        value += `<source src="${videoURL}" type="video/mp4">`;
                        value += `Your browser does not support the video tag.`;
                    value += `</video>`;
                    value += `<p class="text-center mx-auto mt-1"><strong class="mr-1">Tipo:</strong>video MP4</p>`;
                    value += `<p class="text-center mx-auto mt-1"><strong class="mr-1 text-truncate">URL:</strong>${videoURL}</p>`;
                    value += `<p class="text-center mx-auto mt-1 d-flex justify-content-center flex-wrap align-items-center">`;
                        value += `<a href="${videoURL}" target="blank"><i class="fas fa-external-link-alt"></i></a>`;
                    value += `</p>`;
                } else {
                    value = value.i;
                    imgURL = value == "" ? value : `${url}/${value}`;
                    img = value == "" ? value : `${url}/${value}?t=${date.getTime()}`;
                    w = specification.WIDTH === undefined ? "auto" : ( specification.TABLE !== undefined ? specification.TABLE : specification.WIDTH );
                    value = `<img style="width: ${w};" class="table--image" src="${img}" onerror="this.src='${src}'"/>`;
                    if( info !== undefined ) {
                        value += `<p class="text-center mx-auto mt-2"><strong class="mr-1">Dimensiones:</strong>${info[ 0 ]}px x ${info[ 1 ]}px</p>`;
                        value += `<p class="text-center mx-auto mt-1"><strong class="mr-1">Tipo:</strong>${info.mime}</p>`;
                        value += `<p class="text-center mx-auto mt-1"><strong class="mr-1 text-truncate">URL:</strong>${imgURL}</p>`;
                        value += `<p class="text-center mx-auto mt-1 d-flex justify-content-center flex-wrap align-items-center">`;
                            value += `<a href="${imgURL}" target="blank"><i class="fas fa-external-link-alt"></i></a>`;
                            value += `<a onclick="copy( this , '${imgURL}' )" href="#" class="ml-1"><i style="cursor:pointer;" class="far fa-copy"></i></a>`;
                            value += `<a href="${imgURL}" download class="ml-1"><i class="fas fa-download"></i></a>`;
                        value += `</p>`;
                    }
                }
                target.innerHTML = value;
            break;
            case "TP_ARRAY":
                value = elements[ specification.COLUMN ];
                if( value !== null && value !== undefined )
                    value = value.length;
                else
                    value = 0;
                target.textContent = value;
                target.classList.add("text-center");
            break;
            case "TP_CHECK":
                const btn_check = document.createElement("button");
                btn_check.classList.add("btn", "button--form", "btn-link", "btn-sm", "ml-2", "edit--check");
                btn_check.innerHTML = '<i class="fas fa-pen"></i>';
                btn_check.type = "button";
                btn_check.dataset.name = this.name;
                btn_check.dataset.column = column.COLUMN;
                btn_check.dataset.id = id;
                btn_check.dataset.value = value;
                btn_check.disabled = true;
                if (specification.OPTION) {
                    if (specification.OPTION[value])
                        target.textContent = specification.OPTION[value];
                    btn_check.dataset.option = JSON.stringify(specification.OPTION)
                    btn_check.disabled = false;
                }
                target.innerHTML += btn_check.outerHTML;
            break;
            case "TP_YOUTUBE":
                y = `https://www.youtube.com/watch?v=${value}`;
                value = `<iframe class="w-100 h-100" src="https://www.youtube.com/embed/${value}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                value = `<p class="text-center"><a class="text-primary mb-2" href="${y}" target="blank">${y}</a><i class="fas fa-external-link-alt ml-2"></i></p>${value}`;
                target.innerHTML = value;
            break;
            case "TP_FILE":
                value = `<a href="${url}/${value.i}" target="_blank" class="text-primary">${value.i}</a><i class="fas fa-external-link-alt ml-2"></i>`;
                target.innerHTML = value;
            break;
            case "TP_COLOR":
                let elem = document.createElement("div");
                elem.classList.add("text-center");
                elem.innerHTML = `<p>${value[column.COLUMN]}</p><div class="pyrus--color__element" style="background-color: ${value[column.COLUMN]}"></div>`;
                target.innerHTML = elem.outerHTML;
            break;
            case "TP_LINK":
                value = `<a href="${value}" target="_blank" class="text-primary">${value}</a><i class="fas fa-external-link-alt ml-2"></i>`;
                target.innerHTML = value;
            break;
            case "TP_EMAIL":
                value = `<a href="mailto:${value}" target="_blank" class="text-primary">${value}</a><i class="fas fa-external-link-alt ml-2"></i>`;
                target.innerHTML = value;
            break;
            case "TP_FECHA":
            case "TP_DATE":
                value = dates.string( dates.convert( value ) , specification.FORMAT === undefined ? [ "dd" , "mm" , "aaaa" , "h" , "m" , "s" ] : specification.FORMAT );
                target.textContent = value;
                target.classList.add("text-right");
            break;
            case "TP_MONEY":
                value = formatter.format(value);
                target.textContent = value;
                target.classList.add("text-right");
            break;
            case "TP_ENUM":
                if (specification.ENUM) {
                    value = specification.ENUM.find(x => {
                        if(x.id == value)
                            return x;
                    }).text;
                } else {
                    if( dataPYRUS !== null ) {
                        if( dataPYRUS[  column.COLUMN ] !== undefined ) {
                            if( dataPYRUS[  column.COLUMN ].DATA[ value ] !== undefined ) {
                                if( !isNaN( value ) )
                                    value = parseInt( value );
                                value = dataPYRUS[  column.COLUMN ].DATA[ value ];
                                if( typeof value == "object" ) {
                                    if( ENTIDADES[ specification.RELACION.E ].IDIOMAS !== undefined ) {
                                        if( ENTIDADES[ specification.RELACION.E ].IDIOMAS[ specification.RELACION.A ] !== undefined ) {
                                            table = '<div class="mt-n2">';
                                            for( let t in ENTIDADES[ specification.RELACION.E ].IDIOMAS[ specification.RELACION.A ].value ) {
                                                table += '<div class="row mt-2">';
                                                    table += `<div class="col-12 col-md text-uppercase">${ENTIDADES[ specification.RELACION.E ].IDIOMAS[ specification.RELACION.A ].value[ t ]}</div>`;
                                                    table += `<div class="col-12 col-md">${value[ t ]}</div>`
                                                table += '</div>';
                                            }
                                            table += '</div>';
                                            value = table;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                target.innerHTML = value;
            break;
            default:
                target.innerHTML = `<span class="edit" data-name="${this.name}" data-column="${column.COLUMN}" data-id="${id}">${value}</span>`;
        }
        return target;
    };
    this.row = (elements, url, tbody, id, buttonsOK, button) => {
        const columns = this.columnas();
        let tr = document.createElement("tr");
        tr.dataset.id = id;
        let cols = columns.map(y => {
            let td = document.createElement("td");
            td.style.maxWidth = "500px";
            return this.convert(elements[y.COLUMN], td, url, this.especificacion[y.COLUMN].TIPO, this.especificacion[y.COLUMN], elements, y);
        });
        cols.forEach(c => tr.appendChild(c));
        if (buttonsOK.length != 0 || button !== null) {
            let td = document.createElement("td");
            td.classList.add("text-center");
            td.style.width = "50px";
            td.style.maxWidth = "150px";
            buttons = `<td class="text-center" style="width:200px; max-with: 200px">`;
                buttons += `<div class="d-flex justify-content-center">`;
                if( buttonsOK.indexOf( "c" ) >= 0 )
                    buttons += `<button data-toggle="tooltip" data-placement="left" title="Copiar elemento" style="font-size: 12px;" onclick="clone(this,'${id}')" class="btn text-center btn-info rounded-0" disabled><i class="far fa-clone"></i></button>`;
                if( buttonsOK.indexOf( "e" ) >= 0 )
                    buttons += `<button data-toggle="tooltip" data-placement="left" title="Editar elemento" style="font-size: 12px;" onclick="edit(this,'${id}')" class="btn text-center rounded-0 btn-warning"><i class="fas fa-pencil-alt"></i></button>`;
                if( buttonsOK.indexOf( "d" ) >= 0 )
                    buttons += `<button style="font-size: 12px;" data-toggle="tooltip" data-placement="left" title="Eliminar elemento" onclick="erase(this,'${id}')" class="btn text-center rounded-0 btn-danger"><i class="fas fa-trash-alt"></i></button>`;
                if( buttonsOK.indexOf( "s" ) >= 0 )
                    buttons += `<button style="font-size: 12px;" data-toggle="tooltip" data-placement="left" title="Ver elemento" onclick="see(this,'${id}')" class="btn text-center rounded-0 btn-primary"><i class="fas fa-eye"></i></button>`;
                if( button !== null ) {
                    button.forEach( function( b ) {
                        buttons += `<button data-toggle="tooltip" data-placement="left" title="${b.title}" style="font-size: 12px;" onclick="${b.function}Function(this,'${id}')" class="btn text-center rounded-0 ${b.class}">${b.icon}</button>`;
                    });
                }
                buttons += `</div>`;
            buttons += `</td>`;
            td.innerHTML = buttons;
            tr.appendChild(td);
        }
        tbody.appendChild(tr);
    };
    /**
     * @type object target
     * @type string url - url base
     * @type object / array data
     * @var button @type object @description elemento tipo objeto que contiene las características de un boton. Función que dispara, color e ícono
     */
    this.elements = (target , url , data , buttonsOK = [ "c" , "e" , "d" ] , button = null ) => {
        let table = document.querySelector(target);
        let dataAUX = data;
        if( data === null ) {
            console.error( "#### SIN ELEMENTOS - En la base ####" );
            return null;
        }
        if( window.usr_data !== undefined ) {
            if( parseInt( window.usr_data.is_admin ) > 1 ) {
                i = buttonsOK.indexOf( "d" );
                buttonsOK.splice( i , 1 );
            }
        }
        if( data.current_page !== undefined ) {
            data = data.data;
            dataAUX = data;
            console.warn( "### PAGINADO ACTIVO ####" );
        }
        console.info( "### CONSTRUYENDO TABLA ####" );

        if( !Array.isArray(data) )
            dataAUX = Object.keys( data );
        let tbody = null;
        if(table.querySelector("tbody"))
            tbody = table.querySelector("tbody");
        else
            tbody = document.createElement("tbody");

        formatter = new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS',
        });
        dataAUX.map( x => {
            id = null;
            if( !Array.isArray(data) ) {
                id = x;
                x = data[ x ];
            } else {
                if( x.id !== undefined )
                    id = x.id;
            }
            return this.row(x, url, tbody, id, buttonsOK, button);
        }, this);
    };
    this.one = ( url , callbackOK , callbackFail = null ) => {
        axios.get( url, {
            responseType: 'json'
        })
        .then(function( res ) {
            callbackOK.call( this , res );
        })
        .catch(function(err) {
            if( callbackFail !== null )
                callbackFail.call( this , err );
        })
        .then(function() {});
    };
    this.show = (url, data, identifierNAME = null, identifier = null) => {
        for (let x in this.especificacion) {
            let names = this.constructorNames({
                element : x,
                id : identifierNAME,
                multiple : identifier
            });
            switch (this.especificacion[x].TIPO) {
                case "TP_ENUM":
                    let element = document.querySelector(`#${names.idElementForm}`);
                    if (element)
                        $(element).selectpicker('render');
                    break;
            }
        }
        if (data === null) {
            console.warn( `### SIN DATOS ###` );
            return null;
        }
        let ARR_names = [];
        if(!window.ARR_names)
            window.ARR_names = [];
        for (let x in this.especificacion) {
            if (!data[x])
                continue;
            if (this.especificacion[x].TIPO == "TP_PASSWORD")
                continue;
            let flag = 1;
            if (flag) {
                names = {
                    element : x,
                    id : identifierNAME,
                    multiple : identifier
                };
                ARR_names.push(this.constructorNames(names));
            }
        }
        window.ARR_names = window.ARR_names.concat(...ARR_names);

        ARR_names.forEach(element => {
            let x = element.element.element;
            let name = element.idElementForm;
            let flag = 1;
            let value = data[x];
            if(CKEDITOR) {
                if( CKEDITOR.instances[name] !== undefined ) {
                    document.querySelector(`#${name}`).value = value;
                    CKEDITOR.instances[name].setData(value);
                    flag = 0;
                }
            }
            if (flag && value) {
                if (this.especificacion[ x ]) {
                    switch (this.especificacion[ x ].TIPO) {
                        case "TP_FILE":
                            link = `<a target="blank" class="text-primary" href="${url_simple}/${value.i}">${url_simple}/${value.i}</a>`;
                            f = `<p class="w-100"><strong>Extensión:</strong> ${value.e.toUpperCase()}</p>`;
                            f += `<p class="text-truncate w-100"><strong>Link:</strong> ${link}</p>`;
                            $( `#${name}` ).closest( ".input-group" ).find( "+ .input-group-text" ).html( f )
                            $( `#${name}` ).closest( ".input-group" ).find(".imgURL").val(`${value.i}`);
                        break;
                        case "TP_BLOB":
                            element = `data:${data.mime};base64,${value}`;
                            $( `#src-${name}` ).attr( "src" , element );
                            $( `#src-${name}-2` ).attr( "src" , element );
                        break;
                        case "TP_IMAGE":
                            let ul = "";
                            date = new Date();
                            image = value;
                            img = "";
                            if( image !== null ) {
                                if( typeof image == "object" )
                                    image = image.i;
                                if( url.substr(-1) != "/" )
                                    url += "/";
                                img = `${url}${image}`;
                            }
                            ul = `<ul class="image--wh image--wh__details"><li><strong>Ubicación:</strong> <a href="${img}" target="blank"><i class="fas fa-image"></i> [LINK]</a></li></ul>`;
                            if( img != "" ) {
                                img += `?t=${date.getTime()}`;
                                let button = document.querySelector(`#${element.idElementForm}_image`).nextSibling.querySelector(".image--button");
                                button.disabled = false;
                                button.dataset.url = image;
                                if (this.objeto.COLUMN)
                                    button.dataset.column = this.objeto.COLUMN;
                                button.dataset.attr = x;
                                if (data.id)
                                    button.dataset.id = data.id;
                                button.dataset.entidad = this.tableDB;
                                document.querySelector(`#${element.idElementForm}_image`).previousElementSibling.innerHTML += ul;
                                document.querySelector(`#${element.idElementForm}_image`).src = img;
                            }
                        break;
                        case "TP_CHECK":
                            if (value == 1) {
                                const elem = document.querySelector(`#${name}`);
                                elem.checked = true;
                                elem.nextElementSibling.value = 1;
                            }
                        break;
                        case "TP_ENUM":
                            if( this.especificacion[x].NOT_TRIGGER === undefined )
                                $( `#${name}` ).val( value ).trigger( "change" );
                            else
                                $( `#${name}` ).val( value );
                            if( $( `#${name}.selectpicker` ).length )
                                $( `#${name}.selectpicker` ).selectpicker( 'refresh' );
                        break;
                        case "TP_FECHA":
                                document.querySelector(`#${name}`).value = value
                                //regexData = /([0-9]{4})-([0-9]{2})-([0-9]{2})/;
                                //match = regexData.exec(value);match[0]
                        break;
                        case "TP_COLOR":
                            let ele = document.querySelector(`#${name}`);
                            ele.value = value.color;
                            if (ele["onchange"])
                                ele.onchange();
                        break;
                        default:
                            $( `#${name}` ).val( value ).trigger( "change" );
                    }
                }
            }
        });
    };
    this.formulario = (id = "", multiple = null) => {
        if( this.objeto === null )
            return "";

        if( this.objeto[ 'FORM' ] === undefined )
            return "";
        try {
            if (this.objeto.ONE) {
                if (this.objeto.MULTIPLE && id === "" && !multiple) {
                    form = `<fieldset class="form--fieldset">`;
                        form += `<legend>${this.objeto.NOMBRE}</legend>`;
                        form += `<button type="button" class="btn button--form btn-dark px-5 mx-auto d-block text-uppercase" onclick="${this.objeto.MULTIPLE}Function();">${this.objeto.MULTIPLE}<i class="fas fa-plus ml-2"></i></button>`;
                        form += `<div class="row mt-3n" id="wrapper-${this.objeto.MULTIPLE}"></div>`;
                        form += `<button type="button" class="btn button--form btn-dark mt-3 px-5 mx-auto d-block text-uppercase" onclick="${this.objeto.MULTIPLE}Function();">${this.objeto.MULTIPLE}<i class="fas fa-plus ml-2"></i></button>`;
                    form += `</fieldset>`;
                    return form;
                }
            }
            let formulario = "";
            let OBJ_funciones = {}
            let ARR_form = Object.assign([], this.objeto.FORM);

            if (this.objeto.FUNCIONES)
                OBJ_funciones = this.objeto.FUNCIONES;

            ARR_form.forEach(rowElements => {
                let element_row = document.createElement("div");
                element_row.classList.add("row", "justify-content-center");
                for(let i in rowElements) {
                    let row = i;
                    let rowElementos = rowElements[i];
                    rowElementos.forEach( e => {
                        if(this.especificacion[e] === undefined && e != "BTN") {
                            console.warn(`ELEMENTO "${e}" NO ENCONTRADO *** Revise declaration.js`);
                            return false;
                        }
                        let aux = "";
                        let OBJ_funcion = {};
                        if (OBJ_funciones[e] !== undefined)
                            OBJ_funcion = this.objeto['FUNCIONES'][e];
                        if(e != "VACIO") {
                            especificacion = this.especificacion[e]
                            aux = this.inputAdecuado(especificacion, e, id, OBJ_funcion, especificacion.PLACEHOLDER === undefined ? "" : especificacion.PLACEHOLDER, multiple, e);
                        }

                        if(row.indexOf(e) >= 0)
                            row = row.replace(`/${e}/`,aux);
                    }, this);
                    element_row.innerHTML += row;
                }
                formulario += element_row.outerHTML;
            }, this);
            if (multiple)
                formulario = `<input type="hidden" value="" class="remove-element" name="${this.name}_${multiple}[]"/>${formulario}`;
            if (this.objeto.ONE && id === "" && !multiple) {
                formulario = `<div class="contenedorForm w-100 form_${this.entidad}">${formulario}</div>`;
                let fieldset = document.createElement("fieldset");
                fieldset.classList.add("form--fieldset");
                fieldset.innerHTML = `<legend>${this.objeto.NOMBRE}</legend>${formulario}`;
                return fieldset.outerHTML;
            } else
                return `<div class="contenedorForm w-100 form_${this.entidad}">${formulario}</div>`;
        } catch (error) {
            console.error(error);
            return "Error en el armado";
        }
    };
    /**
     * @var Object @type JSON
     * @var e @type String
     */
    this.inputAdecuado = (Object_, element_name, id_name, OBJ_funcion, placeholder , multiple, e) => {
        let names = this.constructorNames({
            element : element_name,
            id : id_name,
            multiple : multiple
        });

        if( Object_.NOMBRE === undefined )
            Object_.NOMBRE = element_name;
        if( Object_.NAME === undefined )
            Object_.NAME = element_name;
        if( placeholder === undefined )
            placeholder = "";
        if( this.objeto.MINUSCULA === undefined )
            Object_.NOMBRE = (Object_.NOMBRE).toUpperCase();

        if( Object_.VISIBILIDAD == 'TP_VISIBLE' || Object_.VISIBILIDAD == 'TP_VISIBLE_FORM' ) {
            switch( Object_.TIPO ) {
                case 'TP_LIST':
                    return this.listDatails(Object_, names, OBJ_funcion, placeholder);
                case 'TP_ENTERO':
                    return this.inputString(Object_, names, "number", OBJ_funcion, placeholder);
                case 'TP_LINK':
                    return this.inputString(Object_, names, "url", OBJ_funcion, placeholder);
                case 'TP_CHECK':
                    return this.check( Object_ , names ,OBJ_funcion );
                case 'TP_MONEY':
                    return this.money( Object_ , names ,OBJ_funcion,placeholder );
                case 'TP_PHONE':
                    return this.inputString(Object_, names, "phone", OBJ_funcion, placeholder);
                case 'TP_EMAIL':
                    return this.inputString(Object_, names, "email", OBJ_funcion, placeholder);
                case 'TP_COLOR':
                    names = this.constructorNames({
                        element : element_name,
                        id : id_name,
                        multiple : multiple
                    }, "hsl");
                    return this.inputColor(Object_, names, OBJ_funcion, placeholder);
                case 'TP_IMAGE':
                    names = this.constructorNames({
                        element : element_name,
                        id : id_name,
                        multiple : multiple
                    }, "check");
                    return this.inputImage(Object_, names, OBJ_funcion);
                case 'TP_FILE':
                    return this.inputString(Object_, names, "file", OBJ_funcion, placeholder);
                case 'TP_STRING':
                    return this.inputString(Object_, names, "text", OBJ_funcion, placeholder);
                case 'TP_TEXT':
                    return this.inputText(Object_, names, OBJ_funcion, placeholder);
                case 'TP_FECHA':
                    return this.inputString(Object_, names, "date", OBJ_funcion, placeholder);
                case 'TP_PASSWORD':
                    return this.inputString(Object_, names, "password", OBJ_funcion, placeholder);
                case 'TP_ENUM':
                    return this.select(Object_, names, OBJ_funcion, placeholder);
                default:
                    return this.inputString(Object_, names, "text", OBJ_funcion, placeholder);
            }
        } else return this.inputHidden(Object_, names);
    };
    /**
     * @var names @type object
     * @var addName @type string
     */
    /**
     * @var names @type object
     * @var addName @type string
     */
    this.constructorNames = ( names , addName = null ) => {
        if (!window.pyrus_ids)
            window.pyrus_ids = {};
        if (!window.pyrus_ids[this.entidad])
            window.pyrus_ids[this.entidad] = [];
        let Arr = {};
        Arr.element = names;
        Arr.nameElementForm = `${this.name}[${names.element}]`;
        Arr.idElementForm = `${this.name}_${names.element}`;
        Arr.nameURLForm = `${this.name}[${names.element}][URL]`;
        Arr.idURLForm = `${this.name}_${names.element}_URL`;
        if (addName) {
            Arr.nameElementForm = `${this.name}[${names.element}][${names.element}]`;
            Arr[`${addName}NameElementForm`] = `${this.name}[${names.element}][${addName}]`;
            Arr[`${addName}ElementForm`] = `${this.name}_${names.element}_${addName}`;
        }

        if (names.multiple) {
            if (addName) {
                Arr[`${addName}NameElementForm`] = `${this.name}[${names.element}][${names.multiple}][]`;
                Arr[`${addName}ElementForm`] = `${this.name}_${names.element}_${names.multiple}`;
            }

            Arr.nameElementForm = `${this.name}[${names.element}][${names.multiple}][]`;
            Arr.idElementForm = `${this.name}_${names.element}_${names.multiple}`;

            Arr.nameURLForm = `${this.name}[${names.element}][${names.multiple}][URL][]`;
            Arr.idURLForm = `${this.name}_${names.element}_${names.multiple}_URL`;
        }
        if (names.id) {
            if (names.id != "") {
                if (typeof names.id != "object") {
                    Arr.idElementForm += `_${names.id}`;
                    Arr.idURLForm += `_${names.id}`;
                    if (addName) {
                        Arr.nameElementForm = `${this.name}[${names.element}][${names.multiple}][][${names.element}]`;
                        Arr[ `${addName}NameElementForm`] = `${this.name}[${names.element}][${names.multiple}][][${addName}]`;
                        Arr[ `${addName}ElementForm`] += `_${names.id}_${addName}`;
                    }
                }

            }
        }
        if (window.pyrus_ids[this.entidad].indexOf(Arr.idElementForm) < 0)
            window.pyrus_ids[this.entidad].push(Arr.idElementForm);
        if (window.pyrus_ids[this.entidad].indexOf(Arr.idURLForm) < 0)
            window.pyrus_ids[this.entidad].push(Arr.idURLForm);
        return Arr;
    };
    /**
     * @var function_ @type object
     */
    this.constructorFunction = (functions, element) => {
        if (!functions)
            return null;

        for(let evt in functions)
            element.setAttribute(evt, functions[evt]);
    };
    //
    this.label = (id, nombre) => {
        label = document.createElement("label");
        label.classList.add("form--label");
        label.setAttribute("for", id);
        label.textContent = nombre;
        return label.outerHTML;
    };
    this.help = (inner, max = null) => {
        if (!inner && !max)
            return "";
        help = document.createElement("small");
        help.classList.add("form-text", "text-muted");
        if (inner)
            help.innerHTML = inner;
        if (max) {
            if (help.innerHTML != "")
                help.innerHTML += `. Cantidad máx. de caracteres: ${max}`;
            else
                help.innerHTML += `Cantidad máx. de caracteres: ${max}`;
        }
        return help.outerHTML;
    };
    this.elementAttr = (element, data) => {
        if (data.NECESARIO)
            element.required = true;
        if (data.DISABLED)
            element.disabled = true;
        if (data.CLASS)
            element.classList.add(...data.CLASS.split(" "));
    };
    //-----------
    this.inputImage = (Object_, Arr, OBJ_funcion) => {
        let contenedorImage = document.createElement("label");
        let aviso = document.createElement("label");
        let aviso_input = document.createElement("input");
        let element = document.createElement("input");
        let image = document.createElement("img");
        let hidden = document.createElement("input");
        let span = document.createElement("span");
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        let button = document.createElement("button");
        let attr = document.createElement("details");
        let attr_html = "";
        attr.classList.add("image--upload__attr");
        attr_html += `<summary>Detalles de la imagen ℹ️</summary>`;
        attr_html += "<ul class='image--wh'>";
        if (Object_.WIDTH) {
            attr_html += `<li><strong>Ancho:</strong> ${Object_.WIDTH}</li>`;
            image.style.width = Object_.WIDTH;
        } else
            attr_html += `<li><strong>Ancho:<strong> sin definir</li>`;
        if (Object_.HEIGHTop)
            attr_html += `<li><strong>Alto:</strong> ${Object_.HEIGHTop}</li>`;
        else if (Object_.HEIGHT) {
            attr_html += `<li><strong>Alto:</strong> ${Object_.HEIGHT}</li>`;
            image.style.height = Object_.HEIGHT;
        } else
            attr_html += `<li><strong>Alto:</strong> sin definir</li>`;
        if (Object_.SIZE)
            attr_html += `<li><strong>Peso:</strong> ${Object_.SIZE}</li>`;
        else
            attr_html += `<li><strong>Peso:</strong> sin definir</li>`;
        if (Object_.FOLDER)
            attr_html += `<li><strong>Carpeta de guardado:</strong> ${Object_.FOLDER}</li>`;
        if (Object_.EXT)
            attr_html += `<li><strong>Extensiones permitidas:</strong> ${Object_.EXT}</li>`;
        attr_html += "</ul>";
        button.classList.add("image--button");
        button.innerHTML = '<i class="fas fa-trash-alt"></i>';
        button.type = "button";
        button.disabled = true;
        button.setAttribute("onclick", "removeFile(this)");
        attr.innerHTML = attr_html;
        hidden.type = "hidden";
        hidden.classList.add("imgURL");
        span.innerHTML = "📂";
        span.dataset.name = "No se seleccionó ningún archivo";
        image.src = "";
        image.setAttribute("onError", `this.src='${src}'`);
        image.classList.add("image--upload__img");
        element.type = "file";
        contenedorImage.classList.add("image--upload");
        contenedorImage.appendChild(element);
        contenedorImage.appendChild(span);
        this.elementAttr(element, Object_);
        if (Object_.ACCEPT)
            element.setAttribute("accept", Object_.ACCEPT);
        aviso.classList.add("check");
        aviso_input.type = "checkbox";
        aviso_input.setAttribute("onchange", "check(this)");
        aviso.appendChild(aviso_input);
        aviso.innerHTML += `<input name="${Arr.checkNameElementForm}" value="0" type="hidden"/><div>¿Mantener nombre del archivo?</div>`;
        image.id = `${Arr.idElementForm}_image`;
        element.id = Arr.idElementForm;
        element.name = Arr.nameElementForm;
        element.setAttribute("onchange", `readURL(this, '${Arr.idElementForm}_image')`);
        hidden.id = Arr.idURLForm;
        hidden.name = Arr.nameURLForm;
        return attr.outerHTML + image.outerHTML + `<div class="d-flex justify-content-between align-items-center mb-2">${aviso.outerHTML}${button.outerHTML}</div>` + contenedorImage.outerHTML + help;
    };
    this.inputString = (Object_, Arr, STR_type, OBJ_funcion = null, placeholder = "") => {
        let element = document.createElement("input");
        let label = Object_.LABEL ? this.label(Arr.idElementForm, Object_.NOMBRE) : "";
        let help = this.help(Object_.HELP, Object_.MAXLENGTH);
        this.elementAttr(element, Object_);
        if (Object_.MAXLENGTH)
            element.maxLength = Object_.MAXLENGTH;
        if (Object_.DEFAULT)
            element.setAttribute("value", Object_.DEFAULT);
        element.type = STR_type;
        switch (STR_type) {
            case "number":
                if (Object_.MIN)
                    element.min = Object_.MIN;
                else
                    element.min = 0;
                if (Object_.MAX)
                    element.max = Object_.MAX;
                if (Object_.STEP)
                    element.step = Object_.STEP;
                element.classList.add("text-center");
            break;
            case "password":
            break;
            case "text":
            break;
            case "phone":
                element.pattern = "[0-9]+";
                element.setAttribute("oninvalid", "this.setCustomValidity('Ingrese sólo números')");
                element.setAttribute("oninput", "this.setCustomValidity('')");
            break;
            case "url":
                element.pattern = "https?://.+";
                element.setAttribute("oninvalid", "this.setCustomValidity('Ingrese una URL válida')");
                element.setAttribute("oninput", "this.setCustomValidity('')");
            break;
            case "email":
                element.pattern = "[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$";
                element.setAttribute("oninvalid", "this.setCustomValidity('Ingrese un email válido')");
                element.setAttribute("oninput", "this.setCustomValidity('')");
            break;
        }
        this.constructorFunction(OBJ_funcion, element);
        element.classList.add("form-control","form--input");
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.placeholder = placeholder === "" ? Object_.NOMBRE : placeholder;
        return label + `<div class="form--input__target">${element.outerHTML}<span></span></div>` + help;
    };
    //-----------
    this.check = (OBJ_elemento, Arr, OBJ_funcion = null) => {
        let check = document.createElement("label");
        let check_input = document.createElement("input");
        let label = OBJ_elemento.LABEL ? this.label(Arr.idElementForm, OBJ_elemento.NOMBRE) : "";
        let help = OBJ_elemento.HELP ? this.help(OBJ_elemento.HELP) : "";
        this.constructorFunction(OBJ_funcion, check);
        check.classList.add("check");
        check_input.type = "checkbox";
        check_input.id = Arr.idElementForm;
        check_input.setAttribute("onchange", "check(this)");
        check.appendChild(check_input);
        check.innerHTML += `<input name="${Arr.nameElementForm}" value="0" type="hidden"/><div>${OBJ_elemento.CHECK}</div>`;

        return label + check.outerHTML + help;
    };
    this.inputHidden = (Object_, Arr) => {
        let element = document.createElement("input");
        element.type = "hidden";
        if (Object_.DEFAULT)
            element.value = Object_.DEFAULT;
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        return element.outerHTML;
    };

    this.listDatails = (OBJ_elemento, Arr, STR_class, OBJ_funcion = null , placeholder = "" ) => {
        let element = document.createElement("input");
        let datalist = document.createElement("datalist");
        let label = OBJ_elemento.LABEL ? this.label(Arr.idElementForm, OBJ_elemento.NOMBRE) : "";
        let help = OBJ_elemento.HELP ? this.help(OBJ_elemento.HELP) : "";
        this.elementAttr(element, OBJ_elemento);
        element.classList.add("form--input", "form-control");
        element.placeholder = placeholder == "" ? OBJ_elemento.NOMBRE : placeholder;
        element.setAttribute("list", `${Arr.idElementForm}s`);
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        datalist.id = `${Arr.idElementForm}s`;
        let flag = 1;
        if (dataPYRUS) {
            if (dataPYRUS[OBJ_elemento.NAME]) {
                flag = 0;
                dataPYRUS[OBJ_elemento.NAME].map( x => {
                    let opt = document.createElement("option");
                    opt.value = x;
                    datalist.appendChild(opt);
                });
            }
        }
        if (flag) {
            if (OBJ_elemento.DATA) {
                OBJ_elemento.DATA.map( x => {
                    let opt = document.createElement("option");
                    opt.value = x;
                    datalist.appendChild(opt);
                });
            }
        }
		return label + element.outerHTML + datalist.outerHTML + help;
    };
    /** REVISAR */
    this.money = ( Object_ , names , STR_class , OBJ_funcion = null , placeholder = "" ) => {
        let STR_funcion = "";
        let inputData = "";
		if( Object_.NECESARIO === undefined ) Object_.NECESARIO = 0;
        if( Object_.DISABLED === undefined ) Object_.DISABLED = 0;
        if( Object_.LABEL === undefined ) Object_.LABEL = 0;

        if( STR_class != "" ) STR_class += " ";

        if( Object_.CLASS !== undefined ) {
            if( STR_class != "" ) STR_class += " ";
            STR_class += Object_.CLASS;
        }
        if( Object_.NECESARIO )
            inputData = "required='true'";
        if( Object_.MAXLENGTH !== undefined ) {
            if( inputData != "" ) inputData += " ";
            inputData += `maxlength="${Object_.MAXLENGTH}"`;
        }
        Arr = this.constructorNames( names , 'button' );

        STR_funcion = this.constructorFunction( OBJ_funcion , Arr.idElementForm );

        if( STR_funcion !== null ) {
            if( inputData != "" )
                inputData += " ";
            inputData += STR_funcion;
        }
        input = `<input value="${Object_.DEFAULT !== undefined ? Object_.DEFAULT : ''}" ${(Object_["DISABLED"] ? "disabled='true'" : "")} ${Object_.READONLY === undefined ? '' : 'readonly'} ${inputData} name="${Arr.nameElementForm}" id="${Arr.idElementForm}" class="${STR_class} maskMoney" type="text" data-symbol="$ " data-thousands="." data-decimal="," placeholder="${placeholder == "" ? Object_["NOMBRE"] : placeholder}" />`;

        if( Object_.HELP !== undefined )
            input += `<small class="form-text text-muted">${Object_.HELP}</small>`
        if(Object_.LABEL)
            input = `<div class="form-label-group mb-0">${input}<label for="${Arr.idElementForm}" class="form-adm">${placeholder == "" ? Object_["NOMBRE"] : placeholder}</label></div>`;
        if(Object_.FIELDSET !== undefined)
            return `<fieldset><legend>${placeholder == "" ? Object_.NOMBRE : placeholder}</legend>${input}</fieldset>`;
        return input;
    };
    /**REVISAR */
    this.inputColor = (Object_, Arr, OBJ_funcion, placeholder) => {
        let element = document.createElement("input");
        let hsl = document.createElement("textarea");
        let color = document.createElement("input");
        let label = Object_.LABEL ? this.label(Arr.idElementForm, Object_.NOMBRE) : "";
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        this.elementAttr(element, Object_);
        element.classList.add("form-control", "form--input");
        hsl.classList.add("form-control", "form--input", "mt-2");
        hsl.textContent = "invert(0%) sepia(1%) saturate(7482%) hue-rotate(185deg) brightness(106%) contrast(100%);";
        hsl.readOnly = true;
        hsl.name = Arr.hslNameElementForm;
        hsl.id = Arr.hslElementForm;
        color.classList.add("form-control", "form--input", "text-right");
        element.type = "color";
        color.type = "text";
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.pattern = "^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$";
        element.setAttribute("value", "#000000");
        element.setAttribute("onchange", "changeColor(this, 'text')");
        color.setAttribute("value", "#000000");
        color.setAttribute("onchange", "changeColor(this, 'color')");
        element.placeholder = placeholder === "" ? Object_.NOMBRE : placeholder;
        this.constructorFunction(OBJ_funcion, element);

        return label + `<div class="pyrus--color">${element.outerHTML}${color.outerHTML}</div>` + hsl.outerHTML + help;
    };
    this.inputText = (Object_, Arr, OBJ_funcion, placeholder) => {
        let element = document.createElement("textarea");
        let label = Object_.LABEL ? this.label(Arr.idElementForm, Object_.NOMBRE) : "";
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        this.elementAttr(element, Object_);
        if (Object_.MAXLENGTH)
            element.MAXLENGTH = Object_.MAXLENGTH;
        this.constructorFunction(OBJ_funcion, element);
        element.classList.add("form--input", "form-control");
        if (!Object_.NORMAL)
            element.classList.add("ckeditor");
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.placeholder = placeholder === "" ? Object_.NOMBRE : placeholder;
        return label + element.outerHTML + help;
    };
    this.select = (Object_, Arr, OBJ_funcion) => {
        let element = document.createElement("select");
        let label = Object_.LABEL ? this.label(Arr.idElementForm, Object_.NOMBRE) : "";
        let help = Object_.HELP ? this.help(Object_.HELP) : "";
        this.elementAttr(element, Object_);
        if (Object_.MULTIPLE)
            element.multiple = true;
        this.constructorFunction(OBJ_funcion, element);
        element.classList.add("select__2", "form--input");
        Arr.nameElementForm += Object_["MULTIPLE"] ? "[]" : "";
        element.name = Arr.nameElementForm;
        element.id = Arr.idElementForm;
        element.dataset.width = "100%";
        element.dataset.style = "btn-white";
        element.dataset.liveSearch = true;
        element.title = Object_.NOMBRE

        if(Object_.ENUM) {
            Object_.ENUM.forEach(o => {
                let opt = document.createElement("option");
                opt.value = o.id;
                opt.text = o.text;
                element.appendChild(opt);
            });
        } else {
            if(dataPYRUS !== null) {
                if (dataPYRUS[Object_.NAME]) {
                    dataPYRUS[Object_.NAME].forEach(o => {
                        let opt = document.createElement("option");
                        opt.value = o.id;
                        opt.text = o.text;
                        element.appendChild(opt);
                    });
                }
            }
        }
		return label + `<div class="form--input__target">${element.outerHTML}<span></span></div>` + help;
	};

    /* ----------------- */
	return this.constructor();
}
